#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Mythic –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import subprocess
import sys
import os
from pathlib import Path

def run_command(command, check=True):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
    try:
        result = subprocess.run(command, shell=True, check=check, capture_output=True, text=True)
        return result.stdout.strip(), result.stderr.strip()
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        print(f"–í—ã–≤–æ–¥: {e.stderr}")
        return None, e.stderr

def check_postgres_installed():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ PostgreSQL"""
    stdout, stderr = run_command("psql --version", check=False)
    if stdout:
        print(f"‚úÖ PostgreSQL –Ω–∞–π–¥–µ–Ω: {stdout}")
        return True
    else:
        print("‚ùå PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def install_postgres_ubuntu():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL –Ω–∞ Ubuntu/Debian"""
    print("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é PostgreSQL...")
    
    commands = [
        "sudo apt update",
        "sudo apt install -y postgresql postgresql-contrib",
        "sudo systemctl start postgresql",
        "sudo systemctl enable postgresql"
    ]
    
    for cmd in commands:
        print(f"–í—ã–ø–æ–ª–Ω—è—é: {cmd}")
        stdout, stderr = run_command(cmd)
        if stderr and "error" in stderr.lower():
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {stderr}")

def setup_database():
    """–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    sql_commands = """
    CREATE USER mythic_user WITH PASSWORD 'mythic_password';
    CREATE DATABASE mythic_db OWNER mythic_user;
    GRANT ALL PRIVILEGES ON DATABASE mythic_db TO mythic_user;
    ALTER USER mythic_user CREATEDB;
    """
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º SQL –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    sql_file = Path("/tmp/setup_mythic.sql")
    sql_file.write_text(sql_commands)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ sudo -u postgres
    cmd = f"sudo -u postgres psql -f {sql_file}"
    stdout, stderr = run_command(cmd, check=False)
    
    if "already exists" in stderr:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    elif stderr and "error" in stderr.lower():
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {stderr}")
        return False
    else:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    sql_file.unlink(missing_ok=True)
    return True

def test_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    test_cmd = "PGPASSWORD=mythic_password psql -h localhost -U mythic_user -d mythic_db -c 'SELECT version();'"
    stdout, stderr = run_command(test_cmd, check=False)
    
    if stdout and "PostgreSQL" in stdout:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {stderr}")
        return False

def install_python_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    pip_cmd = f"{sys.executable} -m pip install asyncpg psycopg2-binary"
    stdout, stderr = run_command(pip_cmd)
    
    if stderr and "error" in stderr.lower():
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {stderr}")
        return False
    else:
        print("‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def create_env_file():
    """–°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª"""
    print("\nüîÑ –°–æ–∑–¥–∞—é .env —Ñ–∞–π–ª...")
    
    env_content = """# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
DATABASE_URL=postgresql://mythic_user:mythic_password@localhost:5432/mythic_db
ASYNC_DATABASE_URL=postgresql+asyncpg://mythic_user:mythic_password@localhost:5432/mythic_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Apify
APIFY_TOKEN=your_apify_token_here

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Clerk
CLERK_SECRET_KEY=your_clerk_secret_key

# Backend URL –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
BACKEND_BASE=http://localhost:8000
"""
    
    env_file = Path(".env")
    if not env_file.exists():
        env_file.write_text(env_content)
        print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
    else:
        print("‚ÑπÔ∏è –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –¥–ª—è Mythic –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–°
    if not os.path.exists("/etc/os-release"):
        print("‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Linux")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ PostgreSQL
    if not check_postgres_installed():
        print("\nüì¶ PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
        install_postgres_ubuntu()
        
        if not check_postgres_installed():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL")
            sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not setup_database():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_python_dependencies():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    create_env_file()
    
    print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û–±–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic revision --autogenerate -m 'Initial migration'")
    print("3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic upgrade head")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: uvicorn app.main:app --reload")

if __name__ == "__main__":
    main() 