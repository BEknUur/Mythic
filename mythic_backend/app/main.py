# app/main.py
from fastapi import FastAPI, Request, BackgroundTasks, HTTPException, Depends
from fastapi.responses import FileResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.requests import ClientDisconnect
import re
from dotenv import load_dotenv
import os
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ mythic_backend)
env_path = Path(__file__).parent.parent.parent / '.env'
load_dotenv(env_path)

from app.routers import auth
from app.routers import user_router

class NormalizePathMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–µ—à–∏ –∏–∑ –ø—É—Ç–∏
        path = request.scope['path']
        if '//' in path:
            request.scope['path'] = re.sub(r'/+', '/', path)
        
        response = await call_next(request)
        return response

import asyncio
from app.services.image_processor import process_folder
from app.services.text_collector import collect_texts
from app.styles import build_book
from app.auth import get_current_user, get_optional_current_user, get_user_from_request
from app.database import get_db, create_tables
from app.services.user_service import UserService
from app.services.book_service import BookService
from app.models import User, Book
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import AnyUrl, BaseModel
from pathlib import Path
import json, logging, random, datetime, uuid, shutil
import time

from app.config import settings
from app.services.apify_client import run_actor, fetch_run, fetch_items
from app.services.downloader import download_photos
from app.auth import clerk_auth

log = logging.getLogger("api")
app = FastAPI(title="–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –õ–µ—Ç–æ–ø–∏—Å—å –õ—é–±–≤–∏", description="–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∫–Ω–∏–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ Instagram –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö")

# –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
status_cache = {}
CACHE_TTL = 5  # 5 —Å–µ–∫—É–Ω–¥

def get_cached_status(run_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
    if run_id in status_cache:
        cached_time, cached_data = status_cache[run_id]
        if time.time() - cached_time < CACHE_TTL:
            return cached_data
        else:
            del status_cache[run_id]
    return None

def set_cached_status(run_id: str, data: dict):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
    status_cache[run_id] = (time.time(), data)

app.add_middleware(NormalizePathMiddleware)
app.add_middleware(
    CORSMiddleware,
    allow_origins=[ "http://localhost:5173","https://mythicai.me","https://www.mythicai.me"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(auth.router)
app.include_router(user_router.router)

BASE_DIR = Path(__file__).resolve().parent.parent  # mythic_backend/
DATA_DIR = BASE_DIR / "data"

app.mount("/static", StaticFiles(directory="static"), name="static")
app.mount("/runs", StaticFiles(directory=str(DATA_DIR), html=False), name="runs")

@app.get("/health")
def health_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API"""
    import psutil
    import os
    
    # Get system info
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    return {
        "status": "ok", 
        "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç! üíï",
        "timestamp": datetime.datetime.now().isoformat(),
        "system": {
            "memory_percent": memory.percent,
            "disk_percent": disk.percent,
            "cpu_percent": psutil.cpu_percent(interval=1),
        },
        "version": "1.0.0"
    }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start-scrape ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/start-scrape")
async def start_scrape(
    url: AnyUrl,
    username: str,  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä username
    style: str = 'romantic',
    request: Request = None,
    db: AsyncSession = Depends(get_db)
):
    """–ù–∞—á–∞—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥ Instagram –ø—Ä–æ—Ñ–∏–ª—è - —Ç–µ–ø–µ—Ä—å –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ username"""
    clean_url = str(url).rstrip("/")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    current_user = get_user_from_request(request) if request else None
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
    if current_user:
        user_identifier = current_user.get("sub")
        is_authenticated = True
    else:
        user_identifier = f"temp_user_{username.lower()}"  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        is_authenticated = False

    run_input = {
        "directUrls":     [clean_url],
        "resultsType":    "details",
        "scrapeComments": False,
        "scrapeStories": True,  # –î–æ–±–∞–≤–ª—è–µ–º —Å–±–æ—Ä —Å—Ç–æ—Ä–∏—Å–æ–≤
        "storiesLimit": 5,      # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å—Ç–æ—Ä–∏—Å–æ–≤
        "resultsLimit":   200,
    }

    webhook = {
        "eventTypes": ["ACTOR.RUN.SUCCEEDED"],
        "requestUrl": f"{settings.BACKEND_BASE}/webhook/apify",
        "payloadTemplate": (
            '{"runId":"{{runId}}",'
            '"datasetId":"{{defaultDatasetId}}"}'
        ),
    }

    run = await run_actor(run_input, webhooks=[webhook])
    run_id = run["id"]
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ë–î —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if is_authenticated:
        await UserService.create_processing_session(
            db=db,
            run_id=run_id,
            clerk_user_id=user_identifier,
            instagram_url=clean_url
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —ç—Ç–æ–≥–æ run_id
    run_dir = Path("data") / run_id
    run_dir.mkdir(parents=True, exist_ok=True)
    user_meta = {
        "user_id": user_identifier,
        "username": username,
        "is_authenticated": is_authenticated,
        "created_at": datetime.datetime.now().isoformat()
    }
    (run_dir / "user_meta.json").write_text(json.dumps(user_meta, ensure_ascii=False), encoding="utf-8")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å (–ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º)
    try:
        (run_dir / "style.txt").write_text(style, encoding="utf-8")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∏–ª—å: {e}")
    
    log.info("Actor started runId=%s for user=%s", run_id, user_identifier)
    return {"runId": run_id, "message": "–ù–∞—á–∏–Ω–∞—é –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"}


@app.post("/webhook/apify")
async def apify_webhook(request: Request, background: BackgroundTasks):
    try:
        payload = await request.json()
    except Exception:
        payload = {}

    run_id = payload.get("runId") or request.headers.get("x-apify-run-id")
    if not run_id:
        raise HTTPException(400, "runId missing")

    dataset_id = payload.get("datasetId")
    if not dataset_id:
        run = await fetch_run(run_id)
        dataset_id = run.get("defaultDatasetId")         

    if not dataset_id:
        raise HTTPException(500, "datasetId unresolved")

    items = await fetch_items(dataset_id)
    run_dir = Path("data") / run_id
    run_dir.mkdir(parents=True, exist_ok=True)
    (run_dir / "posts.json").write_text(json.dumps(items, ensure_ascii=False, indent=2))

    # --- –∫–∞—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---------------------------------------------------------------
    images_dir = run_dir / "images"
    background.add_task(download_photos, items, images_dir)

    log.info(f"Webhook –¥–ª—è {run_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ.")

    return {"status": "processing", "runId": run_id, "message": "–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤–∞—à—É –¥—É—à—É... –°–∫–æ—Ä–æ –Ω–∞—á–Ω—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–∏–≥—É"}


@app.get("/status/{run_id}")
def status(run_id: str, request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏ - –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö, –Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    current_user = get_user_from_request(request)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_status = get_cached_status(run_id)
    if cached_status:
        log.info(f"Status cache hit for {run_id}")
        return cached_status
    
    run_dir = Path("data") / run_id
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not run_dir.exists():
        raise HTTPException(404, "Run not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–Ω–∏–≥–µ
    user_meta_file = run_dir / "user_meta.json"
    has_access = False
    
    if user_meta_file.exists():
        try:
            user_meta = json.loads(user_meta_file.read_text(encoding="utf-8"))
            stored_user_id = user_meta.get("user_id")
            is_authenticated = user_meta.get("is_authenticated", False)
            
            if current_user:
                current_user_id = current_user.get("sub")
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –µ—Å–ª–∏ —ç—Ç–æ –µ–≥–æ –∫–Ω–∏–≥–∞
                if stored_user_id == current_user_id:
                    has_access = True
                # –ò–ª–∏ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                elif current_user_id and current_user_id.startswith("user_"):
                    has_access = True
            else:
                # –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∏—Ö –∫–Ω–∏–≥
                # (–æ–Ω–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∑–Ω–∞—è run_id)
                has_access = True
        except Exception as e:
            log.warning(f"Error reading user meta for run {run_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            has_access = True
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø (—Å—Ç–∞—Ä—ã–µ –∫–Ω–∏–≥–∏)
        has_access = True
    
    if not has_access:
        raise HTTPException(403, "–î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–Ω–∏–≥–µ –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤
    posts_json = run_dir / "posts.json"
    images_dir = run_dir / "images"
    html_file = run_dir / "book.html"
    pdf_file = run_dir / "book.pdf"
    style_file = run_dir / "style.txt"
    format_file = run_dir / "format.txt"
    
    log.info(f"Status check for {run_id} by user {current_user.get('sub') if current_user else 'anonymous'}")
    
    # –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    data_collected = posts_json.exists()
    images_downloaded = images_dir.exists() and any(images_dir.glob("*"))
    book_generated = html_file.exists()

    # –ß–∏—Ç–∞–µ–º —Å—Ç–∏–ª—å –∫–Ω–∏–≥–∏ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    book_style = "romantic"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if style_file.exists():
        try:
            book_style = style_file.read_text(encoding="utf-8").strip()
        except:
            pass

    # –ß–∏—Ç–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–Ω–∏–≥–∏
    book_format = "classic"
    if format_file.exists():
        try:
            book_format = format_file.read_text(encoding="utf-8").strip()
        except:
            pass

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = "–ù–∞—á–∏–Ω–∞—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é..."

    if book_generated:
        style_messages = {
            "romantic": "–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞! –ß–∏—Ç–∞–π —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º",
            "fantasy": "–¢–≤–æ—è —ç–ø–∏—á–µ—Å–∫–∞—è —Ñ—ç–Ω—Ç–µ–∑–∏-—Å–∞–≥–∞ –≥–æ—Ç–æ–≤–∞! –û—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –º–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ",
            "humor": "–¢–≤–æ—è –≤–µ—Å–µ–ª–∞—è —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞! –ì–æ—Ç–æ–≤—å—Å—è —Å–º–µ—è—Ç—å—Å—è"
        }
        messages = style_messages.get(book_style, style_messages["romantic"])
        message = random.choice([messages])  # –£–±–∏—Ä–∞–µ–º random.choice –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    elif images_downloaded:
        style_generation_messages = {
            "romantic": [
                "–ü–∏—à—É —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è...",
                "–°–æ–∑–¥–∞—é –ø–æ—ç—Ç–∏—á–Ω—ã–µ –≥–ª–∞–≤—ã –æ —Ç–≤–æ–µ–π –∫—Ä–∞—Å–æ—Ç–µ...",
                "–ü–æ–¥–±–∏—Ä–∞—é —Å–∞–º—ã–µ –Ω–µ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...",
                "–í–ø–ª–µ—Ç–∞—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ...",
                "–°–æ–∑–¥–∞—é –∫–Ω–∏–≥—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Ç–æ–ø–∏—Ç —Å–µ—Ä–¥—Ü–µ...",
                "–ü–∏—à—É –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –≤ –ª—é–±–≤–∏ –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ...",
                "–ü—Ä–µ–≤—Ä–∞—â–∞—é —Ç–≤–æ–∏ –º–æ–º–µ–Ω—Ç—ã –≤ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–∞–≥—É...",
                "–°–æ–∑–¥–∞—é –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —à–µ–¥–µ–≤—Ä –æ —Ç–≤–æ–µ–π –¥—É—à–µ..."
            ],
            "fantasy": [
                "–°–æ–∑–¥–∞—é —ç–ø–∏—á–µ—Å–∫—É—é —Ñ—ç–Ω—Ç–µ–∑–∏-—Å–∞–≥—É –æ –≤–µ–ª–∏–∫–æ–º –≥–µ—Ä–æ–µ...",
                "–ü–∏—à—É —Ö—Ä–æ–Ω–∏–∫–∏ —Ç–≤–æ–∏—Ö –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π...",
                "–í–ø–ª–µ—Ç–∞—é –¥—Ä–µ–≤–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –≤ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ...",
                "–°–æ–∑–¥–∞—é –ª–µ–≥–µ–Ω–¥—É –æ —Ç–≤–æ–∏—Ö –≥–µ—Ä–æ–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥–≤–∏–≥–∞—Ö...",
                "–ü–∏—à—É –æ —Ç–≤–æ–µ–π –≤–ª–∞—Å—Ç–∏ –Ω–∞–¥ —Å—Ç–∏—Ö–∏—è–º–∏...",
                "–°–æ–∑–¥–∞—é —ç–ø–æ—Å –¥–æ—Å—Ç–æ–π–Ω—ã–π –≤–µ–ª–∏–∫–∏—Ö –≥–µ—Ä–æ–µ–≤...",
                "–ü—Ä–µ–≤—Ä–∞—â–∞—é —Ç–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –≤ –º–∞–≥–∏—á–µ—Å–∫—É—é —Å–∫–∞–∑–∫—É...",
                "–ü–∏—à—É –æ —Ç–≤–æ–µ–º —Å–æ—é–∑–µ —Å –¥—Ä–∞–∫–æ–Ω–∞–º–∏ –∏ –¥—É—Ö–∞–º–∏..."
            ],
            "humor": [
                "–ü–∏—à—É –≤–µ—Å–µ–ª—É—é –∫–æ–º–µ–¥–∏–π–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é...",
                "–°–æ–∑–¥–∞—é —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫—É—é –ª–µ—Ç–æ–ø–∏—Å—å —Ç–≤–æ–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π...",
                "–î–æ–±–∞–≤–ª—è—é —Å–º–µ—à–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...",
                "–ü—Ä–µ–≤—Ä–∞—â–∞—é –æ–±—ã—á–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ –∫–æ–º–µ–¥–∏–π–Ω—ã–µ —Å—Ü–µ–Ω–∫–∏...",
                "–ü–∏—à—É —Å —É–ª—ã–±–∫–æ–π –∏ —Ö–æ—Ä–æ—à–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º...",
                "–°–æ–∑–¥–∞—é –∫–Ω–∏–≥—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–º–µ—è—Ç—å—Å—è...",
                "–î–æ–±–∞–≤–ª—è—é –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —à—É—Ç–∫–∏ –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è...",
                "–ü–∏—à—É –æ —Ç–≤–æ–µ–º —Ç–∞–ª–∞–Ω—Ç–µ –ø–æ–¥–Ω–∏–º–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ..."
            ]
        }
        messages = style_generation_messages.get(book_style, style_generation_messages["romantic"])
        message = random.choice(messages)
    elif data_collected:
        # –ë–æ–ª–µ–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑—É—á–µ–Ω–∏–∏
        analysis_messages = [
            "–ò–∑—É—á–∞—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–∞–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å ‚Äî –∫–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å –≤–∞–∂–Ω–∞...",
            "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é —Ç–≤–æ–∏ –≤–∏–¥–µ–æ ‚Äî –ø—ã—Ç–∞—é—Å—å –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —á–µ—Ä–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è...",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ—Å—Ç–∞, –≥–¥–µ —Ç—ã –±—ã–≤–∞–µ—à—å ‚Äî –æ–Ω–∏ –º–Ω–æ–≥–æ–µ –≥–æ–≤–æ—Ä—è—Ç –æ —á–µ–ª–æ–≤–µ–∫–µ...", 
            "–ß–∏—Ç–∞—é —Ç–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ ‚Äî –≤ –Ω–∏—Ö —á—É–≤—Å—Ç–≤—É–µ—Ç—Å—è —Ç–≤–æ—è –¥—É—à–∞...",
            "–ò–∑—É—á–∞—é —Ç–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –∫–∞–∫ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Ä–∞–∫—É—Ä—Å—ã –∏ –º–æ–º–µ–Ω—Ç—ã...",
            "–°–æ–±–∏—Ä–∞—é –ø–∞–∑–ª —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ—Ç–µ–Ω –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π...",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ ‚Äî —Ç—ã –∏–∑–ª—É—á–∞–µ—à—å –æ—Å–æ–±—ã–π —Å–≤–µ—Ç...",
            "–ò–∑—É—á–∞—é —Ç–æ–Ω–∫–æ—Å—Ç–∏ ‚Äî –∫–∞–∫ —Ç—ã —Å–º–æ—Ç—Ä–∏—à—å, —É–ª—ã–±–∞–µ—à—å—Å—è, –ø–æ–∑–∏—Ä—É–µ—à—å...",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ —Å—Ç–æ—Ä–∏—Å—ã ‚Äî –æ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ –º–æ–º–µ–Ω—Ç—ã –∂–∏–∑–Ω–∏...",
            "–ò–∑—É—á–∞—é —Ç–≤–æ–∏ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –≤ –Ω–∏—Ö —Å—Ç–æ–ª—å–∫–æ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç–∏...",
            "–ì–æ—Ç–æ–≤–ª—é –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫–Ω–∏–≥–∏ ‚Äî –∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–π...",
            "–°–æ–∑–¥–∞—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –æ–Ω–∞ –¥–æ—Å—Ç–æ–π–Ω–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö —Å–ª–æ–≤..."
        ]
        message = random.choice(analysis_messages)
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    status_info = {
        "runId": run_id,
        "message": message,
        "style": book_style,
        "format": book_format,
        "stages": {
            "data_collected": data_collected,
            "images_downloaded": images_downloaded,
            "book_generated": book_generated
        },
        "files": {}
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if html_file.exists():
        status_info["files"]["html"] = f"/view/{run_id}/book.html"
    
    if pdf_file.exists():
        status_info["files"]["pdf"] = f"/download/{run_id}/book.pdf"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if data_collected and posts_json.exists():
        try:
            posts_data = json.loads(posts_json.read_text(encoding="utf-8"))
            if posts_data:
                profile = posts_data[0]
                status_info["profile"] = {
                    "username": profile.get("username"),
                    "fullName": profile.get("fullName"),
                    "followers": profile.get("followersCount"),
                    "posts": len(profile.get("latestPosts", [])),
                    "stories": len(profile.get("stories", []))
                }
        except:
            pass
    
    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    set_cached_status(run_id, status_info)
    
    log.info(f"Status response for {run_id}: stages={status_info['stages']}")
    return status_info


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /download/{run_id}/{filename} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/download/{run_id}/{filename}")
def download_file(run_id: str, filename: str, request: Request):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (PDF, HTML) - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    current_user = get_user_from_request(request)
    if not current_user:
        raise HTTPException(401, "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
    
    run_dir = Path("data") / run_id
    file_path = run_dir / filename
    
    if not file_path.exists():
        raise HTTPException(404, f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    log.info(f"File download {filename} for run {run_id} by user {current_user.get('sub')}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    media_type = "application/pdf" if filename.endswith(".pdf") else "text/html"
    
    return FileResponse(
        path=file_path,
        media_type=media_type,
        filename=filename
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –ø–µ—Ä–≤—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
def limit_book_pages(html_content: str, max_pages: int = 10) -> str:
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç HTML –∫–Ω–∏–≥—É –ø–µ—Ä–≤—ã–º–∏ max_pages —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"""
    try:
        from bs4 import BeautifulSoup
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏
        book_pages = soup.find_all('div', class_='book-page')
        
        if len(book_pages) <= max_pages:
            return html_content  # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ max_pages —Å—Ç—Ä–∞–Ω–∏—Ü
        for i, page in enumerate(book_pages):
            if i >= max_pages:
                page.decompose()  # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ DOM
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_message_html = """
        <div style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100vh; text-align: center; font-family: 'Playfair Display', serif; background-color: #fff; color: #333;">
            <h2 style="font-size: 2em; margin-bottom: 1em; color: #333;">üìö –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è</h2>
            <p style="font-size: 1.2em; margin-bottom: 1.5em; color: #666; max-width: 400px; line-height: 1.6;">
                –≠—Ç–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü –≤–∞—à–µ–π –∫–Ω–∏–≥–∏. –ß—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.
            </p>
            <a href="/" style="background-color: #333; color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; font-size: 1.1em; margin-top: 1em;">
                –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </a>
        </div>
        """
        
        auth_message_page = soup.new_tag('div')
        auth_message_page['class'] = 'book-page auth-required-page'
        auth_message_page.append(BeautifulSoup(auth_message_html, 'html.parser'))
        
        # –ù–∞—Ö–æ–¥–∏–º body –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        body = soup.find('body')
        if body:
            body.append(auth_message_page)
        
        return str(soup)
        
    except Exception as e:
        log.error(f"Error limiting book pages: {e}")
        return html_content  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª

@app.get("/view/{run_id}/book.html")
def view_book_html(run_id: str, request: Request):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä HTML –∫–Ω–∏–≥–∏ ‚Äî —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∫–Ω–∏–≥"""
    current_user = get_user_from_request(request)
    
    run_dir = Path("data") / run_id
    html_file = run_dir / "book.html"
    user_meta_file = run_dir / "user_meta.json"
    format_file = run_dir / "format.txt"
    
    if not html_file.exists():
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    html_content = html_file.read_text(encoding="utf-8")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–Ω–∏–≥–∏
    book_format = "classic"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    if format_file.exists():
        try:
            book_format = format_file.read_text(encoding="utf-8").strip()
        except Exception:
            pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    is_authorized = False
    
    if current_user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        try:
            if user_meta_file.exists():
                user_meta = json.loads(user_meta_file.read_text(encoding="utf-8"))
                stored_user_id = user_meta.get("user_id")
                current_user_id = current_user.get("sub")
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –µ—Å–ª–∏ —ç—Ç–æ –µ–≥–æ –∫–Ω–∏–≥–∞
                if stored_user_id == current_user_id:
                    is_authorized = True
                # –ò–ª–∏ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏)
                elif current_user_id and current_user_id.startswith("user_"):
                    is_authorized = True
        except Exception as e:
            log.warning(f"Error checking user access: {e}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∫–Ω–∏–≥
    # Flipbook –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if book_format == "flipbook":
        log.info(f"Full flipbook view for run {run_id} - no restrictions applied")
        return HTMLResponse(html_content)
    
    # –î–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∫–Ω–∏–≥ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not is_authorized:
        html_content = limit_book_pages(html_content, max_pages=10)
        log.info(f"Classic book view limited to 10 pages for run {run_id}")
    else:
        log.info(f"Full classic book view for run {run_id} by user {current_user.get('sub') if current_user else 'unknown'}")
    
    return HTMLResponse(html_content)

@app.post("/generate-pdf/{run_id}")
async def generate_pdf(run_id: str, current_user: dict = Depends(get_current_user)):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏–∑ HTML –∫–Ω–∏–≥–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    run_dir = Path("data") / run_id
    html_file = run_dir / "book.html"
    pdf_file = run_dir / "book.pdf"
    
    if not html_file.exists():
        raise HTTPException(404, "–ò—Å—Ö–æ–¥–Ω–∞—è HTML –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF.")
    
    if pdf_file.exists():
        return {"status": "exists", "message": "PDF —É–∂–µ —Å–æ–∑–¥–∞–Ω", "download_url": f"/download/{run_id}/book.pdf"}
    
    log.info(f"PDF generation requested for run {run_id} by user {current_user.get('sub')}")
    
    # –ü–æ—Å–∫–æ–ª—å–∫—É fpdf2 —Ç—Ä–µ–±—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –º—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–∞—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∫–∏ –∫–Ω–∏–≥–∏
    # –≠—Ç–æ –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ, –Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ PDF –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
    try:
        images_dir = run_dir / "images"
        imgs = await process_folder(images_dir)
        comments = collect_texts(run_dir / "posts.json")
        user_id = current_user.get("sub")

        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ—Ç PDF
        build_book(run_id, imgs, comments, "classic", user_id)

        if pdf_file.exists():
             return {"status": "success", "message": "PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", "download_url": f"/download/{run_id}/book.pdf"}
        else:
            raise HTTPException(500, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

    except Exception as e:
        log.error(f"Error creating PDF via build_romantic_book: {e}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ / (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/")
def read_root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    static_dir = Path("static")
    index_file = static_dir / "index.html"
    
    if index_file.exists():
        html_content = index_file.read_text(encoding="utf-8")
        return HTMLResponse(content=html_content)
    else:
        return HTMLResponse(content="""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –õ–µ—Ç–æ–ø–∏—Å—å –õ—é–±–≤–∏</title>
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;700&family=Playfair+Display:wght@400;700&family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            line-height: 1.6;
            color: #2c3e50;
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%);
            min-height: 100vh;
            padding: 0;
            display: flex;
        }
        
        /* Sidebar Styles - Shadcn inspired */
        .sidebar {
            width: 280px;
            background: linear-gradient(180deg, #0f0f0f 0%, #1a1a1a 100%);
            border-right: 1px solid #2a2a2a;
            padding: 0;
            display: flex;
            flex-direction: column;
            position: fixed;
            left: 0;
            top: 0;
            height: 100vh;
            z-index: 1000;
            box-shadow: 4px 0 20px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .sidebar-header {
            padding: 24px 20px;
            border-bottom: 1px solid #2a2a2a;
        }
        
        .sidebar-logo {
            display: flex;
            align-items: center;
            gap: 12px;
            color: #ffffff;
            text-decoration: none;
        }
        
        .sidebar-logo-icon {
            width: 32px;
            height: 32px;
            background: linear-gradient(135deg, #ff6b6b 0%, #f368e0 100%);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
        }
        
        .sidebar-logo-text {
            font-family: 'Dancing Script', cursive;
            font-size: 20px;
            font-weight: 700;
        }
        
        .sidebar-nav {
            flex: 1;
            padding: 20px 0;
        }
        
        .nav-section {
            margin-bottom: 32px;
        }
        
        .nav-section-title {
            color: #888888;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.8px;
            padding: 0 20px 12px;
            border-bottom: 1px solid #2a2a2a;
            margin-bottom: 16px;
        }
        
        .nav-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 20px;
            color: #cccccc;
            text-decoration: none;
            transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            margin: 2px 8px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
        }
        
        .nav-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 0;
            background: linear-gradient(135deg, #ff6b6b 0%, #f368e0 100%);
            border-radius: 8px 0 0 8px;
            transition: width 0.2s ease;
        }
        
        .nav-item:hover {
            background: rgba(255, 255, 255, 0.05);
            color: #ffffff;
            transform: translateX(4px);
        }
        
        .nav-item:hover::before {
            width: 3px;
        }
        
        .nav-item.active {
            background: rgba(255, 107, 107, 0.1);
            color: #ff6b6b;
        }
        
        .nav-item.active::before {
            width: 3px;
        }
        
        .nav-icon {
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
        }
        
        .nav-text {
            flex: 1;
        }
        
        .nav-badge {
            background: #ff6b6b;
            color: white;
            font-size: 10px;
            padding: 2px 6px;
            border-radius: 10px;
            font-weight: 600;
        }
        
        .sidebar-footer {
            padding: 20px;
            border-top: 1px solid #2a2a2a;
        }
        
        .progress-section {
            margin-bottom: 16px;
        }
        
        .progress-title {
            color: #cccccc;
            font-size: 12px;
            font-weight: 600;
            margin-bottom: 8px;
        }
        
        .progress-bar-container {
            background: #2a2a2a;
            border-radius: 4px;
            height: 6px;
            overflow: hidden;
        }
        
        .progress-bar-fill {
            background: linear-gradient(135deg, #ff6b6b 0%, #f368e0 100%);
            height: 100%;
            width: 65%;
            border-radius: 4px;
            transition: width 0.3s ease;
        }
        
        .progress-text {
            color: #888888;
            font-size: 11px;
            margin-top: 4px;
        }
        
        .sidebar-toggle {
            position: fixed;
            top: 24px;
            left: 300px;
            z-index: 1001;
            background: rgba(0, 0, 0, 0.8);
            border: none;
            border-radius: 8px;
            padding: 8px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }
        
        .sidebar-toggle:hover {
            background: rgba(0, 0, 0, 0.9);
            transform: scale(1.1);
        }
        
        .main-content {
            flex: 1;
            margin-left: 280px;
            padding: 20px;
            transition: margin-left 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .sidebar.collapsed {
            transform: translateX(-280px);
        }
        
        .sidebar.collapsed + .sidebar-toggle {
            left: 20px;
        }
        
        .main-content.expanded {
            margin-left: 0;
        }
        
        /* Mobile responsive */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-280px);
            }
            
            .sidebar.mobile-open {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .sidebar-toggle {
                left: 20px;
            }
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.15);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #ff6b9d 0%, #c44569 100%);
            padding: 60px 40px;
            text-align: center;
            color: white;
            position: relative;
        }
        
        .header::before {
            content: "üíï";
            position: absolute;
            top: 20px;
            left: 40px;
            font-size: 2em;
            animation: float 3s ease-in-out infinite;
        }
        
        .header::after {
            content: "üíñ";
            position: absolute;
            top: 30px;
            right: 40px;
            font-size: 1.5em;
            animation: float 3s ease-in-out infinite reverse;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .main-title {
            font-family: 'Dancing Script', cursive;
            font-size: 4em;
            font-weight: 700;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }
        
        .subtitle {
            font-family: 'Playfair Display', serif;
            font-size: 1.6em;
            opacity: 0.9;
            margin-bottom: 30px;
        }
        
        .heart-decoration {
            font-size: 2.5em;
            animation: heartbeat 2s ease-in-out infinite;
        }
        
        @keyframes heartbeat {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        .content {
            padding: 60px 40px;
        }
        
        .love-form {
            background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%);
            padding: 40px;
            border-radius: 15px;
            margin-bottom: 40px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .form-title {
            font-family: 'Dancing Script', cursive;
            font-size: 2.5em;
            color: #d63031;
            text-align: center;
            margin-bottom: 30px;
        }
        
        .input-group {
            margin-bottom: 25px;
        }
        
        .input-label {
            display: block;
            font-weight: 600;
            color: #2d3436;
            margin-bottom: 8px;
            font-size: 1.1em;
        }
        
        .input-field {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #fdcb6e;
            border-radius: 12px;
            font-size: 1em;
            transition: all 0.3s ease;
            font-family: 'Inter', sans-serif;
        }
        
        .input-field:focus {
            outline: none;
            border-color: #e17055;
            box-shadow: 0 0 0 3px rgba(225, 112, 85, 0.2);
        }
        
        .love-button {
            width: 100%;
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 30%, #ff9ff3 70%, #f368e0 100%);
            background-size: 300% 300%;
            color: white;
            border: none;
            padding: 18px 40px;
            border-radius: 50px;
            font-size: 1.2em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            font-family: 'Inter', sans-serif;
            margin-top: 20px;
            position: relative;
            overflow: hidden;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 0 8px 32px rgba(255, 107, 107, 0.3);
            animation: gradientShift 6s ease infinite;
        }
        
        .love-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.5s;
        }
        
        .love-button:hover::before {
            left: 100%;
        }
        
        .love-button:hover {
            transform: translateY(-4px) scale(1.02);
            box-shadow: 0 15px 45px rgba(255, 107, 107, 0.4);
            background-position: 100% 0;
        }
        
        .love-button:active {
            transform: translateY(-1px) scale(0.98);
        }
        
        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
        
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 30px;
            margin-top: 40px;
        }
        
        .feature-card {
            background: white;
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 8px 25px rgba(0,0,0,0.08);
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.2, 1.275);
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        .feature-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 107, 107, 0.05), transparent);
            transition: left 0.8s ease;
        }
        
        .feature-card:hover::before {
            left: 100%;
        }
        
        .feature-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 20px 60px rgba(255, 107, 107, 0.15);
            background: linear-gradient(135deg, #ffffff 0%, #fff5f5 100%);
        }
        
        .feature-icon {
            font-size: 3.5em;
            margin-bottom: 20px;
            transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            display: inline-block;
            filter: drop-shadow(0 4px 8px rgba(0,0,0,0.1));
        }
        
        .feature-card:hover .feature-icon {
            transform: scale(1.2) rotate(5deg);
            filter: drop-shadow(0 8px 16px rgba(255, 107, 107, 0.3));
        }
        
        .feature-title {
            font-family: 'Playfair Display', serif;
            font-size: 1.3em;
            color: #2d3436;
            margin-bottom: 15px;
        }
        
        .feature-text {
            color: #636e72;
            line-height: 1.6;
        }
        
        /* Mobile adaptations for main content */
        @media (max-width: 768px) {
            .content {
                padding: 40px 20px;
            }
            
            .header {
                padding: 40px 20px;
            }
            
            .main-title {
                font-size: 2.5em;
            }
            
            .love-form {
                padding: 30px 20px;
            }
            
            .features {
                grid-template-columns: 1fr;
                gap: 20px;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <!-- Sidebar Header -->
        <div class="sidebar-header">
            <a href="/" class="sidebar-logo">
                <div class="sidebar-logo-icon">üíï</div>
                <span class="sidebar-logo-text">Mythic</span>
            </a>
        </div>
        
        <!-- Sidebar Navigation -->
        <nav class="sidebar-nav">
            <!-- Main Actions -->
            <div class="nav-section">
                <div class="nav-section-title">–û—Å–Ω–æ–≤–Ω–æ–µ</div>
                <a href="#" class="nav-item active" data-action="create-book">
                    <div class="nav-icon">üìñ</div>
                    <span class="nav-text">–°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É</span>
                </a>
                <a href="#" class="nav-item" data-action="book-to-tiktok">
                    <div class="nav-icon">üé¨</div>
                    <span class="nav-text">–ö–Ω–∏–≥–∞ ‚Üí TikTok</span>
                    <span class="nav-badge">–ù–æ–≤–æ–µ</span>
                </a>
                <a href="#" class="nav-item" data-action="write-fanfic">
                    <div class="nav-icon">‚úçÔ∏è</div>
                    <span class="nav-text">–ù–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–Ω—Ñ–∏–∫</span>
                </a>
                <a href="#" class="nav-item" data-action="generate-comic">
                    <div class="nav-icon">üé®</div>
                    <span class="nav-text">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∏–∫—Å</span>
                </a>
            </div>
            
            <!-- Library -->
            <div class="nav-section">
                <div class="nav-section-title">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞</div>
                <a href="#" class="nav-item" data-action="my-books">
                    <div class="nav-icon">üìö</div>
                    <span class="nav-text">–ú–æ–∏ –∫–Ω–∏–≥–∏</span>
                </a>
                <a href="#" class="nav-item" data-action="favorites">
                    <div class="nav-icon">‚≠ê</div>
                    <span class="nav-text">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</span>
                </a>
                <a href="#" class="nav-item" data-action="gallery">
                    <div class="nav-icon">üñºÔ∏è</div>
                    <span class="nav-text">–ú–∏–Ω–∏-–≥–∞–ª–µ—Ä–µ—è</span>
                </a>
            </div>
            
            <!-- Settings -->
            <div class="nav-section">
                <div class="nav-section-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>
                <a href="#" class="nav-item" data-action="settings">
                    <div class="nav-icon">‚öôÔ∏è</div>
                    <span class="nav-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
                </a>
                <a href="#" class="nav-item" data-action="help">
                    <div class="nav-icon">‚ùì</div>
                    <span class="nav-text">–ü–æ–º–æ—â—å</span>
                </a>
            </div>
        </nav>
        
        <!-- Sidebar Footer -->
        <div class="sidebar-footer">
            <div class="progress-section">
                <div class="progress-title">–ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è</div>
                <div class="progress-bar-container">
                    <div class="progress-bar-fill"></div>
                </div>
                <div class="progress-text">65% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>
            </div>
        </div>
    </div>
    
    <!-- Sidebar Toggle Button -->
    <button class="sidebar-toggle" id="sidebarToggle">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="3" y1="6" x2="21" y2="6"></line>
            <line x1="3" y1="12" x2="21" y2="12"></line>
            <line x1="3" y1="18" x2="21" y2="18"></line>
        </svg>
    </button>
    
    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <div class="container">
            <div class="header">
                <h1 class="main-title">–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –õ–µ—Ç–æ–ø–∏—Å—å –õ—é–±–≤–∏</h1>
                <p class="subtitle">–°–æ–∑–¥–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—É—é –∫–Ω–∏–≥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞</p>
                <div class="heart-decoration">üíù</div>
            </div>
            
            <div class="content">
                <div class="love-form">
                    <h2 class="form-title">–°–æ–∑–¥–∞—Ç—å –ö–Ω–∏–≥—É –õ—é–±–≤–∏</h2>
                    <form id="loveBookForm">
                        <div class="input-group">
                            <label class="input-label" for="instagramUrl">Instagram –ø—Ä–æ—Ñ–∏–ª—å –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞</label>
                            <input type="url" id="instagramUrl" class="input-field" placeholder="https://www.instagram.com/username" required>
                        </div>
                        
                        <button type="submit" class="love-button">
                            –°–æ–∑–¥–∞—Ç—å –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ö–Ω–∏–≥—É ‚ù§Ô∏è    
                        </button>
                    </form>
                </div>
                
                <div class="features">
                    <div class="feature-card">
                        <div class="feature-icon">üìñ</div>
                        <h3 class="feature-title">–ö—Ä–∞—Å–∏–≤–∞—è –õ–µ—Ç–æ–ø–∏—Å—å</h3>
                        <p class="feature-text">–°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–Ω–∏–≥—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –æ –≤–∞—à–µ–º –ª—é–±–∏–º–æ–º —á–µ–ª–æ–≤–µ–∫–µ</p>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">üíå</div>
                        <h3 class="feature-title">–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ü–æ—Å–ª–∞–Ω–∏—è</h3>
                        <p class="feature-text">–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ —Ü–∏—Ç–∞—Ç—ã –æ –ª—é–±–≤–∏ –º–µ–∂–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏</p>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">üé®</div>
                        <h3 class="feature-title">–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –î–∏–∑–∞–π–Ω</h3>
                        <p class="feature-text">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ —à—Ä–∏—Ñ—Ç–∞–º–∏</p>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">üì±</div>
                        <h3 class="feature-title">–ü—Ä–æ—Å—Ç–æ –∏ –ë—ã—Å—Ç—Ä–æ</h3>
                        <p class="feature-text">–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ Instagram –ø—Ä–æ—Ñ–∏–ª—å - –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞ –≤–∞—Å</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Sidebar toggle functionality
        const sidebar = document.getElementById('sidebar');
        const sidebarToggle = document.getElementById('sidebarToggle');
        const mainContent = document.getElementById('mainContent');
        
        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
        });
        
        // Navigation functionality
        const navItems = document.querySelectorAll('.nav-item');
        
        navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                
                // Remove active class from all items
                navItems.forEach(nav => nav.classList.remove('active'));
                
                // Add active class to clicked item
                item.classList.add('active');
                
                // Handle different actions
                const action = item.getAttribute('data-action');
                handleNavigation(action);
            });
        });
        
        function handleNavigation(action) {
            switch(action) {
                case 'create-book':
                    showCreateBookForm();
                    break;
                case 'book-to-tiktok':
                    showBookToTikTok();
                    break;
                case 'write-fanfic':
                    showFanficForm();
                    break;
                case 'generate-comic':
                    showComicGenerator();
                    break;
                case 'my-books':
                    showMyBooks();
                    break;
                case 'favorites':
                    showFavorites();
                    break;
                case 'gallery':
                    showGallery();
                    break;
                case 'settings':
                    showSettings();
                    break;
                case 'help':
                    showHelp();
                    break;
                default:
                    console.log('Unknown action:', action);
            }
        }
        
        function showCreateBookForm() {
            // Default view is already the create book form
            console.log('Showing create book form');
        }
        
        function showBookToTikTok() {
            alert('üé¨ –§—É–Ω–∫—Ü–∏—è "–ö–Ω–∏–≥–∞ ‚Üí TikTok" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –∏–∑ –≤–∞—à–∏—Ö —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –∫–Ω–∏–≥ –¥–ª—è TikTok –∏ Instagram.');
        }
        
        function showFanficForm() {
            alert('‚úçÔ∏è –§—É–Ω–∫—Ü–∏—è "–ù–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–Ω—Ñ–∏–∫" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–Ω—Ñ–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.');
        }
        
        function showComicGenerator() {
            alert('üé® –§—É–Ω–∫—Ü–∏—è "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∏–∫—Å" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–ú—ã —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–º–∏–∫—Å—ã –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ª—é–±–≤–∏.');
        }
        
        function showMyBooks() {
            alert('üìö –§—É–Ω–∫—Ü–∏—è "–ú–æ–∏ –∫–Ω–∏–≥–∏" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏.');
        }
        
        function showFavorites() {
            alert('‚≠ê –§—É–Ω–∫—Ü–∏—è "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ª—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –≤–∞—à–∏—Ö –∫–Ω–∏–≥.');
        }
        
        function showGallery() {
            alert('üñºÔ∏è –§—É–Ω–∫—Ü–∏—è "–ú–∏–Ω–∏-–≥–∞–ª–µ—Ä–µ—è" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.');
        }
        
        function showSettings() {
            alert('‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—Ç–∏–ª—å –∫–Ω–∏–≥, —è–∑—ã–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é.');
        }
        
        function showHelp() {
            alert('‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n\n‚Ä¢ –í–≤–µ–¥–∏—Ç–µ Instagram URL\n‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É"\n‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—É—é –∫–Ω–∏–≥—É\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: support@mythic.love');
        }
        
        // Form submission
        document.getElementById('loveBookForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const url = document.getElementById('instagramUrl').value;
            const button = document.querySelector('.love-button');
            
            button.disabled = true;
            button.innerHTML = '–°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É... üíï';
            
            try {
                const response = await fetch(`/start-scrape?url=${encodeURIComponent(url)}`);
                const result = await response.json();
                
                if (response.ok) {
                    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç–∞—Ç—É—Å–∞
                    window.location.href = `/status-page?runId=${result.runId}`;
                } else {
                    throw new Error(result.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
                }
            } catch (error) {
                alert('–û—à–∏–±–∫–∞: ' + error.message);
                button.disabled = false;
                button.innerHTML = '–°–æ–∑–¥–∞—Ç—å –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ö–Ω–∏–≥—É ‚ù§Ô∏è';
            }   
        });
        
        // Progress animation
        function animateProgress() {
            const progressFill = document.querySelector('.progress-bar-fill');
            const progressText = document.querySelector('.progress-text');
            
            let progress = 65;
            const interval = setInterval(() => {
                progress += Math.random() * 2;
                if (progress >= 100) {
                    progress = 100;
                    clearInterval(interval);
                    progressText.textContent = '–ì–æ—Ç–æ–≤–æ!';
                } else {
                    progressText.textContent = `${Math.floor(progress)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
                }
                progressFill.style.width = `${progress}%`;
            }, 2000);
        }
        
        // Mobile responsive
        function handleMobileMenu() {
            if (window.innerWidth <= 768) {
                sidebar.classList.add('mobile-menu');
                
                sidebarToggle.addEventListener('click', () => {
                    sidebar.classList.toggle('mobile-open');
                });
                
                // Close sidebar when clicking outside
                document.addEventListener('click', (e) => {
                    if (!sidebar.contains(e.target) && !sidebarToggle.contains(e.target)) {
                        sidebar.classList.remove('mobile-open');
                    }
                });
            }
        }
        
        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            handleMobileMenu();
            // animateProgress(); // Uncomment if you want animated progress
        });
        
        window.addEventListener('resize', handleMobileMenu);
    </script>
</body>
</html>
        """)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /status-page ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/status-page")
def status_page(runId: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    
    # JavaScript –∫–æ–¥ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å f-string
    js_code = """
        const runId = '""" + runId + """';
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        const resultContainer = document.getElementById('resultContainer');
        const downloadButtons = document.getElementById('downloadButtons');
        const statusMessage = document.querySelector('.status-message');
        let intervalId = null;

        const checkStatus = async () => {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º query-–ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                const response = await fetch(`/status/${runId}?t=${new Date().getTime()}`);
                if (!response.ok) {
                    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 401 Unauthorized), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
                    console.error("Status check failed:", response.statusText);
                    if (intervalId) clearInterval(intervalId);
                    statusMessage.textContent = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.";
                    return;
                }

                const status = await response.json();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞
                if (status.message) {
                    progressText.textContent = status.message;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                let progress = 10; // –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                if (status.stages.data_collected) progress = 30;
                if (status.stages.images_downloaded) progress = 60;
                if (status.stages.book_generated) progress = 100;
                progressFill.style.width = `${progress}%`;
                
                
                if (status.stages.book_generated) {
                    if (intervalId) clearInterval(intervalId);
                    
                    progressFill.style.width = '100%';
                    progressText.textContent = '–ì–æ—Ç–æ–≤–æ! ‚ú®';
                    
                    setTimeout(() => {
                        document.querySelector('.progress-container').style.display = 'none';
                        document.querySelector('.heart-loading').style.display = 'none';
                        statusMessage.textContent = status.message || '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ª—é–±–æ–≤—å—é! üíù';
                        resultContainer.style.display = 'block';
                        
                        downloadButtons.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                        
                        if (status.files.html) {
                            const viewBtn = document.createElement('a');
                            viewBtn.href = status.files.html;
                            viewBtn.className = 'download-btn btn-view';
                            viewBtn.textContent = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–Ω–∏–≥—É üëÄ';
                            viewBtn.target = '_blank';
                            downloadButtons.appendChild(viewBtn);
                        }
                        
                        if (status.files.pdf) {
                            const downloadBtn = document.createElement('a');
                            downloadBtn.href = status.files.pdf;
                            downloadBtn.className = 'download-btn btn-download';
                            downloadBtn.textContent = '–°–∫–∞—á–∞—Ç—å PDF üíï';
                            downloadBtn.download = 'romantic_book.pdf';
                            downloadButtons.appendChild(downloadBtn);
                        }
                    }, 1000);
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:", error);
                // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
            }
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        checkStatus();
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        intervalId = setInterval(checkStatus, 3000);
    """
    
    html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–æ–∑–¥–∞–Ω–∏–µ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ö–Ω–∏–≥–∏</title>
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;700&family=Playfair+Display:wght@400;700&family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }}
        
        .status-container {{
            max-width: 600px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 60px 40px;
            text-align: center;
            box-shadow: 0 20px 60px rgba(0,0,0,0.15);
        }}
        
        .status-title {{
            font-family: 'Dancing Script', cursive;
            font-size: 3em;
            color: #e84393;
            margin-bottom: 30px;
        }}
        
        .status-message {{
            font-size: 1.2em;
            color: #2d3436;
            margin-bottom: 40px;
            line-height: 1.6;
        }}
        
        .progress-container {{
            margin: 40px 0;
        }}
        
        .progress-bar {{
            width: 100%;
            height: 12px;
            background: #ddd;
            border-radius: 6px;
            overflow: hidden;
            margin-bottom: 20px;
        }}
        
        .progress-fill {{
            height: 100%;
            background: linear-gradient(135deg, #fd79a8 0%, #e84393 100%);
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 6px;
        }}
        
        .progress-text {{
            color: #636e72;
            font-style: italic;
            min-height: 24px;
        }}
        
        .heart-loading {{
            font-size: 4em;
            margin: 30px 0;
            animation: heartbeat 1.5s ease-in-out infinite;
        }}
        
        @keyframes heartbeat {{
            0%, 100% {{ transform: scale(1) rotate(0deg); }}
            50% {{ transform: scale(1.2) rotate(5deg); }}
        }}
        
        .result-container {{
            display: none;
            margin-top: 30px;
        }}
        
        .success-title {{
            font-family: 'Dancing Script', cursive;
            font-size: 2.5em;
            color: #00b894;
            margin-bottom: 20px;
        }}
        
        .download-buttons {{
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 30px;
        }}
        
        .download-btn {{
            padding: 16px 32px;
            border: none;
            border-radius: 25px;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            cursor: pointer;
            position: relative;
            overflow: hidden;
            text-transform: uppercase;
            letter-spacing: 0.8px;
            font-size: 14px;
            min-width: 180px;
            box-shadow: 0 6px 24px rgba(0,0,0,0.15);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }}
        
        .download-btn::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0.1) 100%);
            transform: translateX(-100%);
            transition: transform 0.6s ease;
        }}
        
        .download-btn:hover::before {{
            transform: translateX(100%);
        }}
        
        .btn-view {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }}
        
        .btn-view:hover {{
            background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
        }}
        
        .btn-download {{
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
        }}
        
        .btn-download:hover {{
            background: linear-gradient(135deg, #f5576c 0%, #f093fb 100%);
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 12px 35px rgba(245, 87, 108, 0.4);
        }}
        
        .download-btn:active {{
            transform: translateY(-1px) scale(1.02);
        }}
        
        @media (max-width: 768px) {{
            .status-container {{
                padding: 40px 20px;
            }}
            
            .download-buttons {{
                flex-direction: column;
                align-items: center;
            }}
        }}
    </style>
</head>
<body>
    <div class="status-container">
        <h1 class="status-title">–°–æ–∑–¥–∞–µ–º –í–∞—à—É –ö–Ω–∏–≥—É –õ—é–±–≤–∏</h1>
        <p class="status-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Å–∞–º—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–Ω–∏–≥—É –¥–ª—è –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚ù§Ô∏è</p>
        
        <div class="heart-loading">üíï</div>
        
        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <p class="progress-text" id="progressText">–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –≤–∞—à–µ–º—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—é...</p>
        </div>
        
        <div class="result-container" id="resultContainer">
            <h2 class="success-title">–í–∞—à–∞ –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞!</h2>
            <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–Ω–∏–≥—É</p>
            <div class="download-buttons" id="downloadButtons">
                
            </div>
        </div>
    </div>
    
    <script>
        {js_code}
    </script>
</body>
</html>
    """
    
    return HTMLResponse(content=html_content)

@app.post("/create-book")
async def create_book(request: Request, background: BackgroundTasks):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–∏–≥—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ - —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    current_user = get_user_from_request(request)
    
    try:
        payload = await request.json()
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è
        if "ClientDisconnect" in str(e):
            log.warning(f"Client disconnected during create-book request")
            raise HTTPException(400, "Request was cancelled by client")
        else:
            log.error(f"Error parsing request body: {e}")
            raise HTTPException(400, "Invalid request body")
    
    run_id = payload.get("runId")

    if not run_id:
        raise HTTPException(400, "runId is required")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞
    run_dir = Path("data") / run_id
    user_meta_file = run_dir / "user_meta.json"
    
    if not user_meta_file.exists():
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    try:
        user_meta = json.loads(user_meta_file.read_text(encoding="utf-8"))
        stored_user_id = user_meta.get("user_id")
        is_authenticated = user_meta.get("is_authenticated", False)
    except Exception:
        raise HTTPException(500, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–Ω–∏–≥–∏
    (Path("data") / run_id / "format.txt").write_text("classic", encoding="utf-8")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–±–æ—Ä–∫—É –≤ —Ñ–æ–Ω–µ
    # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    user_for_build = current_user if current_user else {"sub": stored_user_id}
    background.add_task(run_full_build, run_id, "classic", user_for_build)
    
    return {"status": "ok", "runId": run_id, "message": "–ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞—à—É –∫–Ω–∏–≥—É..."}

@app.post("/create-flipbook")
async def create_flipbook(request: Request, background: BackgroundTasks):
    """–°–æ–∑–¥–∞–µ—Ç flipbook –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ - —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    current_user = get_user_from_request(request)
    
    payload = await request.json()
    run_id = payload.get("runId")

    if not run_id:
        raise HTTPException(400, "runId is required")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞
    run_dir = Path("data") / run_id
    user_meta_file = run_dir / "user_meta.json"
    
    if not user_meta_file.exists():
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    try:
        user_meta = json.loads(user_meta_file.read_text(encoding="utf-8"))
        stored_user_id = user_meta.get("user_id")
        is_authenticated = user_meta.get("is_authenticated", False)
    except Exception:
        raise HTTPException(500, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏")
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–Ω–∏–≥–∏
    (Path("data") / run_id / "format.txt").write_text("flipbook", encoding="utf-8")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–±–æ—Ä–∫—É –≤ —Ñ–æ–Ω–µ
    # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    user_for_build = current_user if current_user else {"sub": stored_user_id}
    background.add_task(run_full_build, run_id, "flipbook", user_for_build)

    return {"status": "ok", "runId": run_id, "message": "–ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞—à —Ñ–ª–∏–ø–±—É–∫..."}

async def run_full_build(run_id: str, book_format: str, user: dict):
    """
    –ü–æ–ª–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∫–∏ –∫–Ω–∏–≥–∏: –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ, —Å–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ HTML.
    """
    run_dir = Path("data") / run_id
    images_dir = run_dir / "images"

    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç flipbook ‚Äî —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π book.html –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    if book_format == "flipbook":
        book_html = run_dir / "book.html"
        if book_html.exists():
            book_html.unlink()

    # 1. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
    try:
        await asyncio.wait_for(wait_for_images(images_dir), timeout=300.0)
    except asyncio.TimeoutError:
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {run_id}")
        return

    # 2. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    posts_file = run_dir / "posts.json"
    posts_data = json.loads(posts_file.read_text(encoding="utf-8"))
    
    style_file = run_dir / "style.txt"
    style = style_file.read_text(encoding="utf-8").strip() if style_file.exists() else "romantic"

    images = sorted([str(p) for p in images_dir.glob("*")])[:30]
    comments = [p.get('caption', '') for p in posts_data]

    user_id = user.get("sub")
    
    # 3. –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    await build_book(style, run_id, images, comments, book_format, user_id)
    print(f"‚úÖ –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è {run_id} (—Ñ–æ—Ä–º–∞—Ç: {book_format}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def wait_for_images(images_dir: Path):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∂–¥–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    while not images_dir.exists() or not any(images_dir.iterdir()):
        await asyncio.sleep(5)
    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ {images_dir} –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")

# –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class SaveBookRequest(BaseModel):
    run_id: str
    custom_title: str = None

class UserBookResponse(BaseModel):
    id: str
    run_id: str
    title: str
    created_at: str
    profile_username: str = None
    profile_full_name: str = None
    has_pdf: bool = False
    has_html: bool = False

class UserBooksResponse(BaseModel):
    books: list[UserBookResponse]
    total: int

class AISuggestionRequest(BaseModel):
    selected_text: str
    book_context: str

class UpdateBookContentRequest(BaseModel):
    book_or_run_id: str
    updated_content: str

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@app.post("/books/save", response_model=dict)
async def save_book_to_library(
    request: SaveBookRequest, 
    current_user: dict = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    clerk_user_id = current_user.get("sub")
    run_id = request.run_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–∏–≥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    run_dir = Path("data") / run_id
    html_file = run_dir / "book.html"
    if not html_file.exists():
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É
    book = await BookService.create_book_from_run(
        db=db,
        run_id=run_id,
        clerk_user_id=clerk_user_id,
        custom_title=request.custom_title
    )
    
    if not book:
        raise HTTPException(500, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥–∏")
    
    log.info(f"–ö–Ω–∏–≥–∞ {run_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clerk_user_id}")
    return {"success": True, "message": "–ö–Ω–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ", "book_id": str(book.id)}

@app.get("/books/my", response_model=UserBooksResponse)
async def get_my_books(
    current_user: dict = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    clerk_user_id = current_user.get("sub")
    books = await BookService.get_user_books(db, clerk_user_id)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–æ–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç–∞
    book_responses = []
    for book in books:
        book_responses.append(UserBookResponse(
            id=str(book.id),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UUID –≤ —Å—Ç—Ä–æ–∫—É
            run_id=book.run_id,
            title=book.title,
            created_at=book.created_at.isoformat(),
            profile_username=book.profile_username,
            profile_full_name=book.profile_full_name,
            has_pdf=book.has_pdf,
            has_html=book.has_html
        ))
    
    return UserBooksResponse(books=book_responses, total=len(book_responses))

@app.delete("/books/{book_id}")
async def delete_book(
    book_id: str, 
    current_user: dict = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    clerk_user_id = current_user.get("sub")
    
    success = await BookService.delete_book(db, book_id, clerk_user_id)
    
    if not success:
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    log.info(f"–ö–Ω–∏–≥–∞ {book_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clerk_user_id}")
    return {"success": True, "message": "–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"}

@app.get("/books/{book_id}/view")
async def view_saved_book(book_id: str, request: Request, db: AsyncSession = Depends(get_db)):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω –∏–∑ URL)
    current_user = get_user_from_request(request)
    if not current_user:
        raise HTTPException(401, "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–Ω–∏–≥–∏")
    
    clerk_user_id = current_user.get("sub")
    book = await BookService.get_book_by_id(db, book_id, clerk_user_id)
    
    if not book:
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    if not book.html_path or not Path(book.html_path).exists():
        raise HTTPException(404, "HTML —Ñ–∞–π–ª –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    log.info(f"Saved book view for book {book_id} by user {clerk_user_id}")
    return HTMLResponse(Path(book.html_path).read_text(encoding="utf-8"))

@app.get("/books/{book_id}/download/{filename}")
async def download_saved_book(
    book_id: str, 
    filename: str, 
    request: Request, 
    db: AsyncSession = Depends(get_db)
):
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω –∏–∑ URL)
    current_user = get_user_from_request(request)
    if not current_user:
        raise HTTPException(401, "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
    
    clerk_user_id = current_user.get("sub")
    book = await BookService.get_book_by_id(db, book_id, clerk_user_id)
    
    if not book:
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    if filename == "book.pdf" and book.pdf_path:
        file_path = Path(book.pdf_path)
    elif filename == "book.html" and book.html_path:
        file_path = Path(book.html_path)
    else:
        raise HTTPException(404, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not file_path.exists():
        raise HTTPException(404, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    log.info(f"Saved book download {filename} for book {book_id} by user {clerk_user_id}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    if filename.endswith('.pdf'):
        media_type = 'application/pdf'
    elif filename.endswith('.html'):
        media_type = 'text/html'
    else:
        media_type = 'application/octet-stream'
    
    return FileResponse(
        path=file_path,
        filename=filename,
        media_type=media_type
    )

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# POLAR PAYMENT ENDPOINTS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

from app.services.polar_service import polar_service
from pydantic import BaseModel

class CreateCheckoutRequest(BaseModel):
    product_type: str  # "pro_subscription" –∏–ª–∏ "single_generation" 
    customer_email: str = None

class CheckoutResponse(BaseModel):
    checkout_url: str
    success: bool
    message: str

@app.post("/payments/create-checkout", response_model=CheckoutResponse)
async def create_polar_checkout(
    request: CreateCheckoutRequest,
    current_user: dict = Depends(get_current_user)
):
    """–°–æ–∑–¥–∞–µ—Ç Polar checkout –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    if not polar_service:
        raise HTTPException(500, "Polar —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Clerk
        user_email = current_user.get("email_addresses", [{}])[0].get("email_address") if current_user.get("email_addresses") else None
        customer_email = request.customer_email or user_email
        
        if request.product_type == "pro_subscription":
            checkout_url = polar_service.create_pro_subscription_checkout(customer_email)
        elif request.product_type == "single_generation":
            checkout_url = polar_service.create_single_generation_checkout(customer_email)
        else:
            raise HTTPException(400, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞")
        
        log.info(f"–°–æ–∑–¥–∞–Ω checkout –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.get('sub')}, —Ç–∏–ø: {request.product_type}")
        
        return CheckoutResponse(
            checkout_url=checkout_url,
            success=True,
            message="Checkout —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        )
        
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è checkout: {e}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è checkout: {str(e)}")

@app.get("/payments/checkout-status/{checkout_id}")
async def get_checkout_status(
    checkout_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å checkout"""
    if not polar_service:
        raise HTTPException(500, "Polar —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    try:
        status = polar_service.get_checkout_status(checkout_id)
        return {"success": True, "status": status}
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ checkout {checkout_id}: {e}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@app.post("/webhook/polar")
async def polar_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Polar"""
    try:
        payload = await request.json()
        event_type = payload.get("type")
        
        log.info(f"–ü–æ–ª—É—á–µ–Ω Polar webhook: {event_type}")
        
        if event_type == "checkout.completed":
            checkout_data = payload.get("data", {})
            checkout_id = checkout_data.get("id")
            customer_email = checkout_data.get("customer_email")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Pro –ø–æ–¥–ø–∏—Å–∫–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
            log.info(f"–û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: checkout_id={checkout_id}, email={customer_email}")
        
        return {"success": True}
        
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Polar webhook: {e}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ webhook: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
