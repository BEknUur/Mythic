# app/main.py
from fastapi import FastAPI, Request, BackgroundTasks, HTTPException, Depends
from fastapi.responses import FileResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware

import asyncio
from app.services.image_processor import process_folder
from app.services.text_collector import collect_texts
from app.services.book_builder import build_romantic_book, create_pdf_from_html
from app.auth import get_current_user, get_optional_current_user, get_user_from_request
from pydantic import AnyUrl, BaseModel
from pathlib import Path
import json, logging, anyio, random, datetime, uuid, shutil

from app.config import settings
from app.services.apify_client import run_actor, fetch_run, fetch_items
from app.services.downloader import download_photos
from app.auth import clerk_auth

log = logging.getLogger("api")
app = FastAPI(title="–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –õ–µ—Ç–æ–ø–∏—Å—å –õ—é–±–≤–∏", description="–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∫–Ω–∏–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ Instagram –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö")


app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:5173", 
        "http://localhost:3000",  
        "http://127.0.0.1:5173",
        "http://127.0.0.1:3000",
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)


app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/health")
def health_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API"""
    return {"status": "ok", "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç! üíï"}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start-scrape ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/start-scrape")
async def start_scrape(url: AnyUrl, current_user: dict = Depends(get_current_user)):
    """–ù–∞—á–∞—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥ Instagram –ø—Ä–æ—Ñ–∏–ª—è - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    clean_url = str(url).rstrip("/")        

    run_input = {
        "directUrls":     [clean_url],
        "resultsType":    "details",
        "scrapeComments": False,
        
        "resultsLimit":   200,
    }

    webhook = {
        "eventTypes": ["ACTOR.RUN.SUCCEEDED"],
        "requestUrl": f"{settings.BACKEND_BASE}/webhook/apify",
        "payloadTemplate": (
            '{"runId":"{{runId}}",'
            '"datasetId":"{{defaultDatasetId}}"}'
        ),
    }

    run = await run_actor(run_input, webhooks=[webhook])
    run_id = run["id"]
    user_id = current_user.get("sub")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —ç—Ç–æ–≥–æ run_id
    run_dir = Path("data") / run_id
    run_dir.mkdir(parents=True, exist_ok=True)
    user_meta = {"user_id": user_id, "created_at": datetime.datetime.now().isoformat()}
    (run_dir / "user_meta.json").write_text(json.dumps(user_meta, ensure_ascii=False), encoding="utf-8")
    
    log.info("Actor started runId=%s for user=%s", run_id, user_id)
    return {"runId": run_id, "message": "–ù–∞—á–∏–Ω–∞—é –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"}


@app.post("/webhook/apify")
async def apify_webhook(request: Request, background: BackgroundTasks):
    try:
        payload = await request.json()
    except Exception:
        payload = {}

    run_id = payload.get("runId") or request.headers.get("x-apify-run-id")
    if not run_id:
        raise HTTPException(400, "runId missing")

    dataset_id = payload.get("datasetId")
    if not dataset_id:
        run = await fetch_run(run_id)
        dataset_id = run.get("defaultDatasetId")         

    if not dataset_id:
        raise HTTPException(500, "datasetId unresolved")

    items = await fetch_items(dataset_id)
    run_dir = Path("data") / run_id
    run_dir.mkdir(parents=True, exist_ok=True)
    (run_dir / "posts.json").write_text(json.dumps(items, ensure_ascii=False, indent=2))

    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    user_id = None
    user_meta_file = run_dir / "user_meta.json"
    if user_meta_file.exists():
        try:
            user_meta = json.loads(user_meta_file.read_text(encoding="utf-8"))
            user_id = user_meta.get("user_id")
        except:
            pass

    # --- –∫–∞—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---------------------------------------------------------------
    images_dir = run_dir / "images"
    background.add_task(download_photos, items, images_dir)

    async def _build():
        print("üíï –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        await asyncio.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        for attempt in range(10):
            if images_dir.exists() and any(images_dir.glob("*")):
                print(f"üì∏ –ù–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ {images_dir}")
                break
            print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10: –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            await asyncio.sleep(2)

        imgs      = await process_folder(images_dir)
        comments  = collect_texts(run_dir / "posts.json")
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = current_user.get("sub")
        user_meta_file = run_dir / "user_meta.json"
        if user_meta_file.exists():
            try:
                user_meta = json.loads(user_meta_file.read_text(encoding="utf-8"))
                user_id = user_meta.get("user_id", user_id)
            except:
                pass
        
        build_romantic_book(run_id, imgs, comments, user_id=user_id)

    background.add_task(lambda: anyio.run(_build))

    return {"status": "processing", "runId": run_id, "message": "–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤–∞—à—É –¥—É—à—É... –°–∫–æ—Ä–æ –Ω–∞—á–Ω—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–∏–≥—É"}


@app.get("/status/{run_id}")
def status(run_id: str, current_user: dict = Depends(get_current_user)):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    run_dir = Path("data") / run_id
    posts_json = run_dir / "posts.json"
    images_dir = run_dir / "images"
    html_file = run_dir / "book.html"
    pdf_file = run_dir / "book.pdf"
    
    log.info(f"Status check for {run_id} by user {current_user.get('sub')}")
    
    data_collected = posts_json.exists()
    images_downloaded = images_dir.exists() and any(images_dir.glob("*"))
    book_generated = html_file.exists()

    message = "–ù–∞—á–∏–Ω–∞—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é..."

    if book_generated:
        message = "–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞! –ß–∏—Ç–∞–π —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º"
    elif images_downloaded:
        romantic_generation_messages = [
            "–ü–∏—à—É –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—à–µ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ‚Äî –∫–∞–∫ —Ç–≤–æ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –º–µ–Ω—è —Å—Ä–µ–¥–∏ —Ç—ã—Å—è—á –¥—Ä—É–≥–∏—Ö...",
            "–û–ø–∏—Å—ã–≤–∞—é –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ ‚Äî –∫–∞–∂–¥–æ–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é...",
            "–î–µ–ª—é—Å—å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏ –æ —Ç–≤–æ–∏—Ö –≤–∏–¥–µ–æ ‚Äî —Ç–∞–º —Å—Ç–æ–ª—å–∫–æ –∂–∏–∑–Ω–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏...",
            "–°–æ–∑–¥–∞—é –≥–ª–∞–≤—É –æ–± –æ—Å–æ–±–µ–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö ‚Äî —Ç–µ—Ö, —á—Ç–æ –≤—Ä–µ–∑–∞–ª–∏—Å—å –≤ –ø–∞–º—è—Ç—å...",
            "–ü–∏—à—É —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è ‚Äî —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω–æ...",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ç–≤–æ–∏—Ö –∫–∞–¥—Ä–æ–≤ ‚Äî —Ç—ã –≤–∏–¥–∏—à—å –º–∏—Ä –ø–æ-–æ—Å–æ–±–µ–Ω–Ω–æ–º—É...",
            "–ò–∑—É—á–∞—é –¥–µ—Ç–∞–ª–∏ –≤ –∫–∞–∂–¥–æ–º —Ñ–æ—Ç–æ ‚Äî —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —É–ª—ã–±–∫—É, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ...",
            "–°–æ–±–∏—Ä–∞—é —Å–∞–º—ã–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–≤–æ–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–Ω–∏–≥–∏...",
            "–î–æ–±–∞–≤–ª—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏ ‚Äî —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ –∏–¥–µ–∞–ª—å–Ω–æ–π...",
            "–°–æ–∑–¥–∞—é –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –Ω–∞–≤—Å–µ–≥–¥–∞..."
        ]
        message = random.choice(romantic_generation_messages)
    elif data_collected:
        # –ë–æ–ª–µ–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑—É—á–µ–Ω–∏–∏
        analysis_messages = [
            "–ò–∑—É—á–∞—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–∞–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å ‚Äî –∫–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å –≤–∞–∂–Ω–∞...",
            "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é —Ç–≤–æ–∏ –≤–∏–¥–µ–æ ‚Äî –ø—ã—Ç–∞—é—Å—å –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —á–µ—Ä–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è...",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ—Å—Ç–∞, –≥–¥–µ —Ç—ã –±—ã–≤–∞–µ—à—å ‚Äî –æ–Ω–∏ –º–Ω–æ–≥–æ–µ –≥–æ–≤–æ—Ä—è—Ç –æ —á–µ–ª–æ–≤–µ–∫–µ...", 
            "–ß–∏—Ç–∞—é —Ç–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ ‚Äî –≤ –Ω–∏—Ö —á—É–≤—Å—Ç–≤—É–µ—Ç—Å—è —Ç–≤–æ—è –¥—É—à–∞...",
            "–ò–∑—É—á–∞—é —Ç–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –∫–∞–∫ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Ä–∞–∫—É—Ä—Å—ã –∏ –º–æ–º–µ–Ω—Ç—ã...",
            "–°–æ–±–∏—Ä–∞—é –ø–∞–∑–ª —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ—Ç–µ–Ω –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π...",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ ‚Äî —Ç—ã –∏–∑–ª—É—á–∞–µ—à—å –æ—Å–æ–±—ã–π —Å–≤–µ—Ç...",
            "–ò–∑—É—á–∞—é —Ç–æ–Ω–∫–æ—Å—Ç–∏ ‚Äî –∫–∞–∫ —Ç—ã —Å–º–æ—Ç—Ä–∏—à—å, —É–ª—ã–±–∞–µ—à—å—Å—è, –ø–æ–∑–∏—Ä—É–µ—à—å...",
            "–ì–æ—Ç–æ–≤–ª—é –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫–Ω–∏–≥–∏ ‚Äî –∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–π...",
            "–°–æ–∑–¥–∞—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –æ–Ω–∞ –¥–æ—Å—Ç–æ–π–Ω–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö —Å–ª–æ–≤..."
        ]
        message = random.choice(analysis_messages)
    
    status_info = {
        "runId": run_id,
        "message": message,
        "stages": {
            "data_collected": data_collected,
            "images_downloaded": images_downloaded,
            "book_generated": book_generated
        },
        "files": {}
    }
    
    if html_file.exists():
        status_info["files"]["html"] = f"/view/{run_id}/book.html"
    
    if pdf_file.exists():
        status_info["files"]["pdf"] = f"/download/{run_id}/book.pdf"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if posts_json.exists():
        try:
            posts_data = json.loads(posts_json.read_text(encoding="utf-8"))
            if posts_data:
                profile = posts_data[0]
                status_info["profile"] = {
                    "username": profile.get("username"),
                    "fullName": profile.get("fullName"),
                    "followers": profile.get("followersCount"),
                    "posts": len(profile.get("latestPosts", []))
                }
        except:
            pass
    
    log.info(f"Status response: {status_info}")
    return status_info


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /download/{run_id}/{filename} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/download/{run_id}/{filename}")
def download_file(run_id: str, filename: str, request: Request):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (PDF, HTML) - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    current_user = get_user_from_request(request)
    if not current_user:
        raise HTTPException(401, "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
    
    run_dir = Path("data") / run_id
    file_path = run_dir / filename
    
    if not file_path.exists():
        raise HTTPException(404, f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    log.info(f"File download {filename} for run {run_id} by user {current_user.get('sub')}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    media_type = "application/pdf" if filename.endswith(".pdf") else "text/html"
    
    return FileResponse(
        path=file_path,
        media_type=media_type,
        filename=filename
    )


@app.get("/view/{run_id}/book.html")
def view_book_html(run_id: str, request: Request):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä HTML –∫–Ω–∏–≥–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    current_user = get_user_from_request(request)
    if not current_user:
        raise HTTPException(401, "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–Ω–∏–≥–∏")
    
    run_dir = Path("data") / run_id
    html_file = run_dir / "book.html"
    
    if not html_file.exists():
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    log.info(f"Book view for run {run_id} by user {current_user.get('sub')}")
    
    html_content = html_file.read_text(encoding="utf-8")
    return HTMLResponse(content=html_content)


@app.post("/generate-pdf/{run_id}")
async def generate_pdf(run_id: str, current_user: dict = Depends(get_current_user)):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏–∑ HTML –∫–Ω–∏–≥–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    run_dir = Path("data") / run_id
    html_file = run_dir / "book.html"
    pdf_file = run_dir / "book.pdf"
    
    if not html_file.exists():
        raise HTTPException(404, "HTML –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    if pdf_file.exists():
        return {"status": "exists", "message": "PDF —É–∂–µ —Å–æ–∑–¥–∞–Ω", "download_url": f"/download/{run_id}/book.pdf"}
    
    log.info(f"PDF generation for run {run_id} by user {current_user.get('sub')}")
    
    try:
        await create_pdf_from_html(str(html_file), str(pdf_file))
        return {"status": "success", "message": "PDF —Å–æ–∑–¥–∞–Ω", "download_url": f"/download/{run_id}/book.pdf"}
    except Exception as e:
        log.error(f"Error creating PDF: {e}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ / (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/")
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    static_dir = Path("static")
    index_file = static_dir / "index.html"
    
    if index_file.exists():
        html_content = index_file.read_text(encoding="utf-8")
        return HTMLResponse(content=html_content)
    else:
        return HTMLResponse(content="""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –õ–µ—Ç–æ–ø–∏—Å—å –õ—é–±–≤–∏</title>
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;700&family=Playfair+Display:wght@400;700&family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            line-height: 1.6;
            color: #2c3e50;
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%);
            min-height: 100vh;
            padding: 0;
            display: flex;
        }
        
        /* Sidebar Styles - Shadcn inspired */
        .sidebar {
            width: 280px;
            background: linear-gradient(180deg, #0f0f0f 0%, #1a1a1a 100%);
            border-right: 1px solid #2a2a2a;
            padding: 0;
            display: flex;
            flex-direction: column;
            position: fixed;
            left: 0;
            top: 0;
            height: 100vh;
            z-index: 1000;
            box-shadow: 4px 0 20px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .sidebar-header {
            padding: 24px 20px;
            border-bottom: 1px solid #2a2a2a;
        }
        
        .sidebar-logo {
            display: flex;
            align-items: center;
            gap: 12px;
            color: #ffffff;
            text-decoration: none;
        }
        
        .sidebar-logo-icon {
            width: 32px;
            height: 32px;
            background: linear-gradient(135deg, #ff6b6b 0%, #f368e0 100%);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
        }
        
        .sidebar-logo-text {
            font-family: 'Dancing Script', cursive;
            font-size: 20px;
            font-weight: 700;
        }
        
        .sidebar-nav {
            flex: 1;
            padding: 20px 0;
        }
        
        .nav-section {
            margin-bottom: 32px;
        }
        
        .nav-section-title {
            color: #888888;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.8px;
            padding: 0 20px 12px;
            border-bottom: 1px solid #2a2a2a;
            margin-bottom: 16px;
        }
        
        .nav-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 20px;
            color: #cccccc;
            text-decoration: none;
            transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            margin: 2px 8px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
        }
        
        .nav-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 0;
            background: linear-gradient(135deg, #ff6b6b 0%, #f368e0 100%);
            border-radius: 8px 0 0 8px;
            transition: width 0.2s ease;
        }
        
        .nav-item:hover {
            background: rgba(255, 255, 255, 0.05);
            color: #ffffff;
            transform: translateX(4px);
        }
        
        .nav-item:hover::before {
            width: 3px;
        }
        
        .nav-item.active {
            background: rgba(255, 107, 107, 0.1);
            color: #ff6b6b;
        }
        
        .nav-item.active::before {
            width: 3px;
        }
        
        .nav-icon {
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
        }
        
        .nav-text {
            flex: 1;
        }
        
        .nav-badge {
            background: #ff6b6b;
            color: white;
            font-size: 10px;
            padding: 2px 6px;
            border-radius: 10px;
            font-weight: 600;
        }
        
        .sidebar-footer {
            padding: 20px;
            border-top: 1px solid #2a2a2a;
        }
        
        .progress-section {
            margin-bottom: 16px;
        }
        
        .progress-title {
            color: #cccccc;
            font-size: 12px;
            font-weight: 600;
            margin-bottom: 8px;
        }
        
        .progress-bar-container {
            background: #2a2a2a;
            border-radius: 4px;
            height: 6px;
            overflow: hidden;
        }
        
        .progress-bar-fill {
            background: linear-gradient(135deg, #ff6b6b 0%, #f368e0 100%);
            height: 100%;
            width: 65%;
            border-radius: 4px;
            transition: width 0.3s ease;
        }
        
        .progress-text {
            color: #888888;
            font-size: 11px;
            margin-top: 4px;
        }
        
        .sidebar-toggle {
            position: fixed;
            top: 24px;
            left: 300px;
            z-index: 1001;
            background: rgba(0, 0, 0, 0.8);
            border: none;
            border-radius: 8px;
            padding: 8px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }
        
        .sidebar-toggle:hover {
            background: rgba(0, 0, 0, 0.9);
            transform: scale(1.1);
        }
        
        .main-content {
            flex: 1;
            margin-left: 280px;
            padding: 20px;
            transition: margin-left 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .sidebar.collapsed {
            transform: translateX(-280px);
        }
        
        .sidebar.collapsed + .sidebar-toggle {
            left: 20px;
        }
        
        .main-content.expanded {
            margin-left: 0;
        }
        
        /* Mobile responsive */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-280px);
            }
            
            .sidebar.mobile-open {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .sidebar-toggle {
                left: 20px;
            }
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.15);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #ff6b9d 0%, #c44569 100%);
            padding: 60px 40px;
            text-align: center;
            color: white;
            position: relative;
        }
        
        .header::before {
            content: "üíï";
            position: absolute;
            top: 20px;
            left: 40px;
            font-size: 2em;
            animation: float 3s ease-in-out infinite;
        }
        
        .header::after {
            content: "üíñ";
            position: absolute;
            top: 30px;
            right: 40px;
            font-size: 1.5em;
            animation: float 3s ease-in-out infinite reverse;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .main-title {
            font-family: 'Dancing Script', cursive;
            font-size: 4em;
            font-weight: 700;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }
        
        .subtitle {
            font-family: 'Playfair Display', serif;
            font-size: 1.6em;
            opacity: 0.9;
            margin-bottom: 30px;
        }
        
        .heart-decoration {
            font-size: 2.5em;
            animation: heartbeat 2s ease-in-out infinite;
        }
        
        @keyframes heartbeat {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        .content {
            padding: 60px 40px;
        }
        
        .love-form {
            background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%);
            padding: 40px;
            border-radius: 15px;
            margin-bottom: 40px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .form-title {
            font-family: 'Dancing Script', cursive;
            font-size: 2.5em;
            color: #d63031;
            text-align: center;
            margin-bottom: 30px;
        }
        
        .input-group {
            margin-bottom: 25px;
        }
        
        .input-label {
            display: block;
            font-weight: 600;
            color: #2d3436;
            margin-bottom: 8px;
            font-size: 1.1em;
        }
        
        .input-field {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #fdcb6e;
            border-radius: 12px;
            font-size: 1em;
            transition: all 0.3s ease;
            font-family: 'Inter', sans-serif;
        }
        
        .input-field:focus {
            outline: none;
            border-color: #e17055;
            box-shadow: 0 0 0 3px rgba(225, 112, 85, 0.2);
        }
        
        .love-button {
            width: 100%;
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 30%, #ff9ff3 70%, #f368e0 100%);
            background-size: 300% 300%;
            color: white;
            border: none;
            padding: 18px 40px;
            border-radius: 50px;
            font-size: 1.2em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            font-family: 'Inter', sans-serif;
            margin-top: 20px;
            position: relative;
            overflow: hidden;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 0 8px 32px rgba(255, 107, 107, 0.3);
            animation: gradientShift 6s ease infinite;
        }
        
        .love-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.5s;
        }
        
        .love-button:hover::before {
            left: 100%;
        }
        
        .love-button:hover {
            transform: translateY(-4px) scale(1.02);
            box-shadow: 0 15px 45px rgba(255, 107, 107, 0.4);
            background-position: 100% 0;
        }
        
        .love-button:active {
            transform: translateY(-1px) scale(0.98);
        }
        
        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
        
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 30px;
            margin-top: 40px;
        }
        
        .feature-card {
            background: white;
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 8px 25px rgba(0,0,0,0.08);
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        .feature-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 107, 107, 0.05), transparent);
            transition: left 0.8s ease;
        }
        
        .feature-card:hover::before {
            left: 100%;
        }
        
        .feature-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 20px 60px rgba(255, 107, 107, 0.15);
            background: linear-gradient(135deg, #ffffff 0%, #fff5f5 100%);
        }
        
        .feature-icon {
            font-size: 3.5em;
            margin-bottom: 20px;
            transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            display: inline-block;
            filter: drop-shadow(0 4px 8px rgba(0,0,0,0.1));
        }
        
        .feature-card:hover .feature-icon {
            transform: scale(1.2) rotate(5deg);
            filter: drop-shadow(0 8px 16px rgba(255, 107, 107, 0.3));
        }
        
        .feature-title {
            font-family: 'Playfair Display', serif;
            font-size: 1.3em;
            color: #2d3436;
            margin-bottom: 15px;
        }
        
        .feature-text {
            color: #636e72;
            line-height: 1.6;
        }
        
        /* Mobile adaptations for main content */
        @media (max-width: 768px) {
            .content {
                padding: 40px 20px;
            }
            
            .header {
                padding: 40px 20px;
            }
            
            .main-title {
                font-size: 2.5em;
            }
            
            .love-form {
                padding: 30px 20px;
            }
            
            .features {
                grid-template-columns: 1fr;
                gap: 20px;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <!-- Sidebar Header -->
        <div class="sidebar-header">
            <a href="/" class="sidebar-logo">
                <div class="sidebar-logo-icon">üíï</div>
                <span class="sidebar-logo-text">Mythic</span>
            </a>
        </div>
        
        <!-- Sidebar Navigation -->
        <nav class="sidebar-nav">
            <!-- Main Actions -->
            <div class="nav-section">
                <div class="nav-section-title">–û—Å–Ω–æ–≤–Ω–æ–µ</div>
                <a href="#" class="nav-item active" data-action="create-book">
                    <div class="nav-icon">üìñ</div>
                    <span class="nav-text">–°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É</span>
                </a>
                <a href="#" class="nav-item" data-action="book-to-tiktok">
                    <div class="nav-icon">üé¨</div>
                    <span class="nav-text">–ö–Ω–∏–≥–∞ ‚Üí TikTok</span>
                    <span class="nav-badge">–ù–æ–≤–æ–µ</span>
                </a>
                <a href="#" class="nav-item" data-action="write-fanfic">
                    <div class="nav-icon">‚úçÔ∏è</div>
                    <span class="nav-text">–ù–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–Ω—Ñ–∏–∫</span>
                </a>
                <a href="#" class="nav-item" data-action="generate-comic">
                    <div class="nav-icon">üé®</div>
                    <span class="nav-text">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∏–∫—Å</span>
                </a>
            </div>
            
            <!-- Library -->
            <div class="nav-section">
                <div class="nav-section-title">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞</div>
                <a href="#" class="nav-item" data-action="my-books">
                    <div class="nav-icon">üìö</div>
                    <span class="nav-text">–ú–æ–∏ –∫–Ω–∏–≥–∏</span>
                </a>
                <a href="#" class="nav-item" data-action="favorites">
                    <div class="nav-icon">‚≠ê</div>
                    <span class="nav-text">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</span>
                </a>
                <a href="#" class="nav-item" data-action="gallery">
                    <div class="nav-icon">üñºÔ∏è</div>
                    <span class="nav-text">–ú–∏–Ω–∏-–≥–∞–ª–µ—Ä–µ—è</span>
                </a>
            </div>
            
            <!-- Settings -->
            <div class="nav-section">
                <div class="nav-section-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>
                <a href="#" class="nav-item" data-action="settings">
                    <div class="nav-icon">‚öôÔ∏è</div>
                    <span class="nav-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
                </a>
                <a href="#" class="nav-item" data-action="help">
                    <div class="nav-icon">‚ùì</div>
                    <span class="nav-text">–ü–æ–º–æ—â—å</span>
                </a>
            </div>
        </nav>
        
        <!-- Sidebar Footer -->
        <div class="sidebar-footer">
            <div class="progress-section">
                <div class="progress-title">–ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è</div>
                <div class="progress-bar-container">
                    <div class="progress-bar-fill"></div>
                </div>
                <div class="progress-text">65% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>
            </div>
        </div>
    </div>
    
    <!-- Sidebar Toggle Button -->
    <button class="sidebar-toggle" id="sidebarToggle">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="3" y1="6" x2="21" y2="6"></line>
            <line x1="3" y1="12" x2="21" y2="12"></line>
            <line x1="3" y1="18" x2="21" y2="18"></line>
        </svg>
    </button>
    
    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <div class="container">
            <div class="header">
                <h1 class="main-title">–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –õ–µ—Ç–æ–ø–∏—Å—å –õ—é–±–≤–∏</h1>
                <p class="subtitle">–°–æ–∑–¥–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—É—é –∫–Ω–∏–≥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞</p>
                <div class="heart-decoration">üíù</div>
            </div>
            
            <div class="content">
                <div class="love-form">
                    <h2 class="form-title">–°–æ–∑–¥–∞—Ç—å –ö–Ω–∏–≥—É –õ—é–±–≤–∏</h2>
                    <form id="loveBookForm">
                        <div class="input-group">
                            <label class="input-label" for="instagramUrl">Instagram –ø—Ä–æ—Ñ–∏–ª—å –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞</label>
                            <input type="url" id="instagramUrl" class="input-field" placeholder="https://www.instagram.com/username" required>
                        </div>
                        
                        <button type="submit" class="love-button">
                            –°–æ–∑–¥–∞—Ç—å –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ö–Ω–∏–≥—É ‚ù§Ô∏è    
                        </button>
                    </form>
                </div>
                
                <div class="features">
                    <div class="feature-card">
                        <div class="feature-icon">üìñ</div>
                        <h3 class="feature-title">–ö—Ä–∞—Å–∏–≤–∞—è –õ–µ—Ç–æ–ø–∏—Å—å</h3>
                        <p class="feature-text">–°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–Ω–∏–≥—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –æ –≤–∞—à–µ–º –ª—é–±–∏–º–æ–º —á–µ–ª–æ–≤–µ–∫–µ</p>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">üíå</div>
                        <h3 class="feature-title">–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ü–æ—Å–ª–∞–Ω–∏—è</h3>
                        <p class="feature-text">–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ —Ü–∏—Ç–∞—Ç—ã –æ –ª—é–±–≤–∏ –º–µ–∂–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏</p>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">üé®</div>
                        <h3 class="feature-title">–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –î–∏–∑–∞–π–Ω</h3>
                        <p class="feature-text">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ —à—Ä–∏—Ñ—Ç–∞–º–∏</p>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">üì±</div>
                        <h3 class="feature-title">–ü—Ä–æ—Å—Ç–æ –∏ –ë—ã—Å—Ç—Ä–æ</h3>
                        <p class="feature-text">–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ Instagram –ø—Ä–æ—Ñ–∏–ª—å - –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞ –≤–∞—Å</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Sidebar toggle functionality
        const sidebar = document.getElementById('sidebar');
        const sidebarToggle = document.getElementById('sidebarToggle');
        const mainContent = document.getElementById('mainContent');
        
        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
        });
        
        // Navigation functionality
        const navItems = document.querySelectorAll('.nav-item');
        
        navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                
                // Remove active class from all items
                navItems.forEach(nav => nav.classList.remove('active'));
                
                // Add active class to clicked item
                item.classList.add('active');
                
                // Handle different actions
                const action = item.getAttribute('data-action');
                handleNavigation(action);
            });
        });
        
        function handleNavigation(action) {
            switch(action) {
                case 'create-book':
                    showCreateBookForm();
                    break;
                case 'book-to-tiktok':
                    showBookToTikTok();
                    break;
                case 'write-fanfic':
                    showFanficForm();
                    break;
                case 'generate-comic':
                    showComicGenerator();
                    break;
                case 'my-books':
                    showMyBooks();
                    break;
                case 'favorites':
                    showFavorites();
                    break;
                case 'gallery':
                    showGallery();
                    break;
                case 'settings':
                    showSettings();
                    break;
                case 'help':
                    showHelp();
                    break;
                default:
                    console.log('Unknown action:', action);
            }
        }
        
        function showCreateBookForm() {
            // Default view is already the create book form
            console.log('Showing create book form');
        }
        
        function showBookToTikTok() {
            alert('üé¨ –§—É–Ω–∫—Ü–∏—è "–ö–Ω–∏–≥–∞ ‚Üí TikTok" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –∏–∑ –≤–∞—à–∏—Ö —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –∫–Ω–∏–≥ –¥–ª—è TikTok –∏ Instagram.');
        }
        
        function showFanficForm() {
            alert('‚úçÔ∏è –§—É–Ω–∫—Ü–∏—è "–ù–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–Ω—Ñ–∏–∫" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–Ω—Ñ–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.');
        }
        
        function showComicGenerator() {
            alert('üé® –§—É–Ω–∫—Ü–∏—è "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∏–∫—Å" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–ú—ã —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–º–∏–∫—Å—ã –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ª—é–±–≤–∏.');
        }
        
        function showMyBooks() {
            alert('üìö –§—É–Ω–∫—Ü–∏—è "–ú–æ–∏ –∫–Ω–∏–≥–∏" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏.');
        }
        
        function showFavorites() {
            alert('‚≠ê –§—É–Ω–∫—Ü–∏—è "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ª—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –≤–∞—à–∏—Ö –∫–Ω–∏–≥.');
        }
        
        function showGallery() {
            alert('üñºÔ∏è –§—É–Ω–∫—Ü–∏—è "–ú–∏–Ω–∏-–≥–∞–ª–µ—Ä–µ—è" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.');
        }
        
        function showSettings() {
            alert('‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—Ç–∏–ª—å –∫–Ω–∏–≥, —è–∑—ã–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é.');
        }
        
        function showHelp() {
            alert('‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n\n‚Ä¢ –í–≤–µ–¥–∏—Ç–µ Instagram URL\n‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É"\n‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—É—é –∫–Ω–∏–≥—É\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: support@mythic.love');
        }
        
        // Form submission
        document.getElementById('loveBookForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const url = document.getElementById('instagramUrl').value;
            const button = document.querySelector('.love-button');
            
            button.disabled = true;
            button.innerHTML = '–°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É... üíï';
            
            try {
                const response = await fetch(`/start-scrape?url=${encodeURIComponent(url)}`);
                const result = await response.json();
                
                if (response.ok) {
                    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç–∞—Ç—É—Å–∞
                    window.location.href = `/status-page?runId=${result.runId}`;
                } else {
                    throw new Error(result.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
                }
            } catch (error) {
                alert('–û—à–∏–±–∫–∞: ' + error.message);
                button.disabled = false;
                button.innerHTML = '–°–æ–∑–¥–∞—Ç—å –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ö–Ω–∏–≥—É ‚ù§Ô∏è';
            }   
        });
        
        // Progress animation
        function animateProgress() {
            const progressFill = document.querySelector('.progress-bar-fill');
            const progressText = document.querySelector('.progress-text');
            
            let progress = 65;
            const interval = setInterval(() => {
                progress += Math.random() * 2;
                if (progress >= 100) {
                    progress = 100;
                    clearInterval(interval);
                    progressText.textContent = '–ì–æ—Ç–æ–≤–æ!';
                } else {
                    progressText.textContent = `${Math.floor(progress)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
                }
                progressFill.style.width = `${progress}%`;
            }, 2000);
        }
        
        // Mobile responsive
        function handleMobileMenu() {
            if (window.innerWidth <= 768) {
                sidebar.classList.add('mobile-menu');
                
                sidebarToggle.addEventListener('click', () => {
                    sidebar.classList.toggle('mobile-open');
                });
                
                // Close sidebar when clicking outside
                document.addEventListener('click', (e) => {
                    if (!sidebar.contains(e.target) && !sidebarToggle.contains(e.target)) {
                        sidebar.classList.remove('mobile-open');
                    }
                });
            }
        }
        
        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            handleMobileMenu();
            // animateProgress(); // Uncomment if you want animated progress
        });
        
        window.addEventListener('resize', handleMobileMenu);
    </script>
</body>
</html>
        """)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /status-page ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.get("/status-page")
def status_page(runId: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    
    # JavaScript –∫–æ–¥ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å f-string
    js_code = """
        const runId = '""" + runId + """';
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        const resultContainer = document.getElementById('resultContainer');
        const downloadButtons = document.getElementById('downloadButtons');
        
        const stages = [
            { text: '–ò–∑—É—á–∞—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –æ—Å–æ–±—ã–º –≤–Ω–∏–º–∞–Ω–∏–µ–º...', progress: 20 },
            { text: '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é —Ç–≤–æ–∏ –≤–∏–¥–µ–æ ‚Äî —Å—Ç–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –Ω–∏—Ö...', progress: 40 },
            { text: '–ü–∏—à—É –ª–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è...', progress: 60 },
            { text: '–î–æ–±–∞–≤–ª—è—é —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —à—Ç—Ä–∏—Ö–∏ –≤ —Ç–≤–æ—é –∫–Ω–∏–≥—É...', progress: 80 },
            { text: '–°–æ–∑–¥–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç–≤–æ–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞...', progress: 95 }
        ];
        
        let currentStage = 0;
        
        // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞—é—â–µ–π—Å—è –º–∞—à–∏–Ω–∫–∏
        function typewriterAnimation(element, text, speed = 80) {
            return new Promise((resolve) => {
                element.textContent = '';
                let i = 0;
                
                function typeChar() {
                    if (i < text.length) {
                        element.textContent += text.charAt(i);
                        i++;
                        setTimeout(typeChar, speed);
                    } else {
                        resolve();
                    }
                }
                
                typeChar();
            });
        }
        
        async function updateProgress() {
            if (currentStage < stages.length) {
                const stage = stages[currentStage];
                progressFill.style.width = stage.progress + '%';
                
                // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                await typewriterAnimation(progressText, stage.text, 60);
                
                currentStage++;
                setTimeout(updateProgress, 4000); // –£–≤–µ–ª–∏—á–∏–ª –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
            }
        }
        
        async function checkStatus() {
            try {
                const response = await fetch(`/status/${runId}`);
                const status = await response.json();
                
                // –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è stages, –ø–æ–∫–∞ –∫–Ω–∏–≥–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞
                
                if (status.stages.book_generated) {
                    progressFill.style.width = '100%';
                    progressText.textContent = '–ì–æ—Ç–æ–≤–æ! ‚ú®';
                    
                    setTimeout(() => {
                        document.querySelector('.progress-container').style.display = 'none';
                        document.querySelector('.heart-loading').style.display = 'none';
                        document.querySelector('.status-message').textContent = '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ª—é–±–æ–≤—å—é! üíù';
                        resultContainer.style.display = 'block';
                        
                        if (status.files.html) {
                            const viewBtn = document.createElement('a');
                            viewBtn.href = status.files.html;
                            viewBtn.className = 'download-btn btn-view';
                            viewBtn.textContent = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–Ω–∏–≥—É üëÄ';
                            viewBtn.target = '_blank';
                            downloadButtons.appendChild(viewBtn);
                        }
                        
                        if (status.files.pdf) {
                            const downloadBtn = document.createElement('a');
                            downloadBtn.href = status.files.pdf;
                            downloadBtn.className = 'download-btn btn-download';
                            downloadBtn.textContent = '–°–∫–∞—á–∞—Ç—å PDF üíï';
                            downloadBtn.download = 'romantic_book.pdf';
                            downloadButtons.appendChild(downloadBtn);
                        }
                    }, 1000);
                } else {
                    setTimeout(checkStatus, 3000);
                }
            } catch (error) {
                setTimeout(checkStatus, 5000);
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
        updateProgress();
        setTimeout(checkStatus, 5000);
    """
    
    html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–æ–∑–¥–∞–Ω–∏–µ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ö–Ω–∏–≥–∏</title>
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;700&family=Playfair+Display:wght@400;700&family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }}
        
        .status-container {{
            max-width: 600px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 60px 40px;
            text-align: center;
            box-shadow: 0 20px 60px rgba(0,0,0,0.15);
        }}
        
        .status-title {{
            font-family: 'Dancing Script', cursive;
            font-size: 3em;
            color: #e84393;
            margin-bottom: 30px;
        }}
        
        .status-message {{
            font-size: 1.2em;
            color: #2d3436;
            margin-bottom: 40px;
            line-height: 1.6;
        }}
        
        .progress-container {{
            margin: 40px 0;
        }}
        
        .progress-bar {{
            width: 100%;
            height: 12px;
            background: #ddd;
            border-radius: 6px;
            overflow: hidden;
            margin-bottom: 20px;
        }}
        
        .progress-fill {{
            height: 100%;
            background: linear-gradient(135deg, #fd79a8 0%, #e84393 100%);
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 6px;
        }}
        
        .progress-text {{
            color: #636e72;
            font-style: italic;
            min-height: 24px;
        }}
        
        .heart-loading {{
            font-size: 4em;
            margin: 30px 0;
            animation: heartbeat 1.5s ease-in-out infinite;
        }}
        
        @keyframes heartbeat {{
            0%, 100% {{ transform: scale(1) rotate(0deg); }}
            50% {{ transform: scale(1.2) rotate(5deg); }}
        }}
        
        .result-container {{
            display: none;
            margin-top: 30px;
        }}
        
        .success-title {{
            font-family: 'Dancing Script', cursive;
            font-size: 2.5em;
            color: #00b894;
            margin-bottom: 20px;
        }}
        
        .download-buttons {{
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 30px;
        }}
        
        .download-btn {{
            padding: 16px 32px;
            border: none;
            border-radius: 25px;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            cursor: pointer;
            position: relative;
            overflow: hidden;
            text-transform: uppercase;
            letter-spacing: 0.8px;
            font-size: 14px;
            min-width: 180px;
            box-shadow: 0 6px 24px rgba(0,0,0,0.15);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }}
        
        .download-btn::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0.1) 100%);
            transform: translateX(-100%);
            transition: transform 0.6s ease;
        }}
        
        .download-btn:hover::before {{
            transform: translateX(100%);
        }}
        
        .btn-view {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }}
        
        .btn-view:hover {{
            background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
        }}
        
        .btn-download {{
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
        }}
        
        .btn-download:hover {{
            background: linear-gradient(135deg, #f5576c 0%, #f093fb 100%);
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 12px 35px rgba(245, 87, 108, 0.4);
        }}
        
        .download-btn:active {{
            transform: translateY(-1px) scale(1.02);
        }}
        
        @media (max-width: 768px) {{
            .status-container {{
                padding: 40px 20px;
            }}
            
            .download-buttons {{
                flex-direction: column;
                align-items: center;
            }}
        }}
    </style>
</head>
<body>
    <div class="status-container">
        <h1 class="status-title">–°–æ–∑–¥–∞–µ–º –í–∞—à—É –ö–Ω–∏–≥—É –õ—é–±–≤–∏</h1>
        <p class="status-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Å–∞–º—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–Ω–∏–≥—É –¥–ª—è –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚ù§Ô∏è</p>
        
        <div class="heart-loading">üíï</div>
        
        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <p class="progress-text" id="progressText">–°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...</p>
        </div>
        
        <div class="result-container" id="resultContainer">
            <h2 class="success-title">–í–∞—à–∞ –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞!</h2>
            <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–Ω–∏–≥—É</p>
            <div class="download-buttons" id="downloadButtons">
                
            </div>
        </div>
    </div>
    
    <script>
        {js_code}
    </script>
</body>
</html>
    """
    
    return HTMLResponse(content=html_content)

@app.post("/create-book")
async def create_book(request: Request, background: BackgroundTasks, current_user: dict = Depends(get_current_user)):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–Ω–∏–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        body = await request.json()
        run_id = body.get("runId")
        book_format = body.get("format", "classic")  # "classic" –∏–ª–∏ "zine"
        
        if not run_id:
            raise HTTPException(400, "runId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        run_dir = Path("data") / run_id
        if not run_dir.exists():
            raise HTTPException(404, f"–î–∞–Ω–Ω—ã–µ –¥–ª—è runId {run_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        log.info(f"Book creation started for run {run_id} by user {current_user.get('sub')}")
    except Exception as e:
        raise HTTPException(400, f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞: {e}")

    async def _build():
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_dir = run_dir / "images"
        for attempt in range(10):  # –ú–∞–∫—Å–∏–º—É–º 20 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
            if images_dir.exists() and any(images_dir.glob("*")):
                print(f"üì∏ –ù–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ {images_dir}")
                break
            print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10: –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            await asyncio.sleep(2)

        imgs      = await process_folder(images_dir)
        comments  = collect_texts(run_dir / "posts.json")
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = current_user.get("sub")
        user_meta_file = run_dir / "user_meta.json"
        if user_meta_file.exists():
            try:
                user_meta = json.loads(user_meta_file.read_text(encoding="utf-8"))
                user_id = user_meta.get("user_id", user_id)
            except:
                pass
        
        build_romantic_book(run_id, imgs, comments, book_format, user_id=user_id)

    background.add_task(lambda: anyio.run(_build))

    format_name = "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –∫–Ω–∏–≥—É" if book_format == "classic" else "–º–æ–∑–∞–∏—á–Ω—ã–π –∑–∏–Ω"
    return {"status": "processing", "runId": run_id, "format": book_format, "message": f"–°–æ–∑–¥–∞–Ω–∏–µ {format_name} –Ω–∞—á–∞–ª–æ—Å—å! –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞"}

# –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class SaveBookRequest(BaseModel):
    run_id: str
    custom_title: str = None

class UserBook(BaseModel):
    id: str
    run_id: str
    title: str
    created_at: str
    profile_username: str = None
    profile_full_name: str = None
    has_pdf: bool = False
    has_html: bool = False

class UserBooksResponse(BaseModel):
    books: list[UserBook]
    total: int

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∫–Ω–∏–≥–∞–º–∏
def get_user_books_db_path(user_id: str) -> Path:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–Ω–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_books_dir = Path("data") / "user_books"
    user_books_dir.mkdir(parents=True, exist_ok=True)
    return user_books_dir / f"{user_id}.json"

def load_user_books(user_id: str) -> list[dict]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    books_file = get_user_books_db_path(user_id)
    if not books_file.exists():
        return []
    try:
        return json.loads(books_file.read_text(encoding="utf-8"))
    except:
        return []

def save_user_books(user_id: str, books: list[dict]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    books_file = get_user_books_db_path(user_id)
    books_file.write_text(json.dumps(books, ensure_ascii=False, indent=2), encoding="utf-8")

def copy_book_to_user_library(run_id: str, user_id: str, book_id: str) -> bool:
    """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        source_dir = Path("data") / run_id
        user_library_dir = Path("data") / "user_books" / user_id / book_id
        user_library_dir.mkdir(parents=True, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∫–Ω–∏–≥–∏
        for file in ["book.html", "book.pdf", "posts.json"]:
            source_file = source_dir / file
            if source_file.exists():
                shutil.copy2(source_file, user_library_dir / file)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        source_images = source_dir / "images"
        if source_images.exists():
            target_images = user_library_dir / "images"
            if target_images.exists():
                shutil.rmtree(target_images)
            shutil.copytree(source_images, target_images)
        
        return True
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ {run_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@app.post("/books/save", response_model=dict)
async def save_book_to_library(request: SaveBookRequest, current_user: dict = Depends(get_current_user)):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = current_user.get("sub")
    run_id = request.run_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–∏–≥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    run_dir = Path("data") / run_id
    html_file = run_dir / "book.html"
    if not html_file.exists():
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ posts.json
    posts_json = run_dir / "posts.json"
    profile_username = None
    profile_full_name = None
    if posts_json.exists():
        try:
            posts_data = json.loads(posts_json.read_text(encoding="utf-8"))
            if posts_data:
                profile = posts_data[0]
                profile_username = profile.get("username")
                profile_full_name = profile.get("fullName")
        except:
            pass
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–Ω–∏–≥–∏
    book_id = str(uuid.uuid4())
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
    title = request.custom_title or f"–î–ª—è {profile_full_name or profile_username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} —Å –ª—é–±–æ–≤—å—é"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    books = load_user_books(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–Ω–∏–≥–∞
    for book in books:
        if book["run_id"] == run_id:
            return {"success": True, "message": "–ö–Ω–∏–≥–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ", "book_id": book["id"]}
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not copy_book_to_user_library(run_id, user_id, book_id):
        raise HTTPException(500, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥–∏")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ —Å–ø–∏—Å–æ–∫
    pdf_file = run_dir / "book.pdf"
    new_book = {
        "id": book_id,
        "run_id": run_id,
        "title": title,
        "created_at": datetime.datetime.now().isoformat(),
        "profile_username": profile_username,
        "profile_full_name": profile_full_name,
        "has_pdf": pdf_file.exists(),
        "has_html": html_file.exists()
    }
    
    books.append(new_book)
    save_user_books(user_id, books)
    
    log.info(f"–ö–Ω–∏–≥–∞ {run_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return {"success": True, "message": "–ö–Ω–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ", "book_id": book_id}

@app.get("/books/my", response_model=UserBooksResponse)
async def get_my_books(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = current_user.get("sub")
    books_data = load_user_books(user_id)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–æ–¥–µ–ª–∏ Pydantic
    books = [UserBook(**book) for book in books_data]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    books.sort(key=lambda x: x.created_at, reverse=True)
    
    return UserBooksResponse(books=books, total=len(books))

@app.delete("/books/{book_id}")
async def delete_book(book_id: str, current_user: dict = Depends(get_current_user)):
    """–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = current_user.get("sub")
    books = load_user_books(user_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–∏–≥—É
    book_to_delete = None
    for i, book in enumerate(books):
        if book["id"] == book_id:
            book_to_delete = book
            books.pop(i)
            break
    
    if not book_to_delete:
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–Ω–∏–≥–∏
    book_dir = Path("data") / "user_books" / user_id / book_id
    if book_dir.exists():
        try:
            shutil.rmtree(book_dir)
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–Ω–∏–≥–∏ {book_id}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    save_user_books(user_id, books)
    
    log.info(f"–ö–Ω–∏–≥–∞ {book_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return {"success": True, "message": "–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"}

@app.get("/books/{book_id}/view")
async def view_saved_book(book_id: str, request: Request):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω –∏–∑ URL)
    current_user = get_user_from_request(request)
    if not current_user:
        raise HTTPException(401, "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–Ω–∏–≥–∏")
    
    user_id = current_user.get("sub")
    books = load_user_books(user_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–∏–≥—É
    book = None
    for b in books:
        if b["id"] == book_id:
            book = b
            break
    
    if not book:
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É –∫–Ω–∏–≥–∏
    book_dir = Path("data") / "user_books" / user_id / book_id
    html_file = book_dir / "book.html"
    
    if not html_file.exists():
        raise HTTPException(404, "HTML —Ñ–∞–π–ª –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    log.info(f"Saved book view for book {book_id} by user {user_id}")
    return HTMLResponse(html_file.read_text(encoding="utf-8"))

@app.get("/books/{book_id}/download/{filename}")
async def download_saved_book(book_id: str, filename: str, request: Request):
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω –∏–∑ URL)
    current_user = get_user_from_request(request)
    if not current_user:
        raise HTTPException(401, "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
    
    user_id = current_user.get("sub")
    books = load_user_books(user_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–∏–≥—É
    book = None
    for b in books:
        if b["id"] == book_id:
            book = b
            break
    
    if not book:
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    book_dir = Path("data") / "user_books" / user_id / book_id
    file_path = book_dir / filename
    
    if not file_path.exists():
        raise HTTPException(404, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    log.info(f"Saved book download {filename} for book {book_id} by user {user_id}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    if filename.endswith('.pdf'):
        media_type = 'application/pdf'
    elif filename.endswith('.html'):
        media_type = 'text/html'
    else:
        media_type = 'application/octet-stream'
    
    return FileResponse(
        path=file_path,
        filename=filename,
        media_type=media_type
    )
