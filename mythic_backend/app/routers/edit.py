import os
import re
from typing import List, Dict
from fastapi import APIRouter
from pydantic import BaseModel
from starlette.responses import StreamingResponse, Response
from openai import AsyncAzureOpenAI
import json

router = APIRouter(prefix="/api")

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ —Ç–µ–º
FORBIDDEN_WORDS = [
    # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    "–±–ª—è–¥—å", "—Å—É–∫–∞", "—Ö—É–π", "–ø–∏–∑–¥–∞", "–µ–±–∞—Ç—å", "–µ–±–∞–Ω—ã–π", "–≥–æ–≤–Ω–æ", "–¥–µ—Ä—å–º–æ",
    "fuck", "shit", "bitch", "damn", "ass", "crap"
]

FORBIDDEN_TOPICS = [
    "—Å–ø–æ—Ä—Ç", "—Ñ—É—Ç–±–æ–ª", "—Ö–æ–∫–∫–µ–π", "–±–∞—Å–∫–µ—Ç–±–æ–ª", "—Ç–µ–Ω–Ω–∏—Å", "–æ–ª–∏–º–ø–∏–∞–¥–∞",
    "–ø–æ–≥–æ–¥–∞", "–∫–ª–∏–º–∞—Ç", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥", "—Å–æ–ª–Ω—Ü–µ",
    "–ø–æ–ª–∏—Ç–∏–∫–∞", "–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç", "–≤—ã–±–æ—Ä—ã", "–ø–∞—Ä—Ç–∏—è", "–≤–ª–∞—Å—Ç—å",
    "—Ä–µ–ª–∏–≥–∏—è", "–±–æ–≥", "—Ü–µ—Ä–∫–æ–≤—å", "–º–æ–ª–∏—Ç–≤–∞", "–≤–µ—Ä–∞",
    "–º–µ–¥–∏—Ü–∏–Ω–∞", "–ª–µ—á–µ–Ω–∏–µ", "–±–æ–ª–µ–∑–Ω—å", "–≤—Ä–∞—á", "–±–æ–ª—å–Ω–∏—Ü–∞",
    "–µ–¥–∞", "—Ä–µ—Ü–µ–ø—Ç", "–≥–æ—Ç–æ–≤–∫–∞", "–∫—É–ª–∏–Ω–∞—Ä–∏—è", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω"
]

def check_content_policy(text: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_allowed, reason)
    """
    text_lower = text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    for word in FORBIDDEN_WORDS:
        if word in text_lower:
            return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
    for topic in FORBIDDEN_TOPICS:
        if topic in text_lower:
            return False, f"–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ–º—ã '{topic}' –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if len(text.strip()) < 10 and not any(word in text_lower for word in ["—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–∏–∑–º–µ–Ω–∏—Ç—å", "—É–ª—É—á—à–∏—Ç—å", "–∏—Å–ø—Ä–∞–≤–∏—Ç—å"]):
        return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    return True, ""

def is_text_editing_request(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞.
    """
    editing_keywords = [
        "–∏–∑–º–µ–Ω–∏—Ç—å", "—É–ª—É—á—à–∏—Ç—å", "–∏—Å–ø—Ä–∞–≤–∏—Ç—å", "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å",
        "—Å–¥–µ–ª–∞—Ç—å", "–∑–∞–º–µ–Ω–∏—Ç—å", "–¥–æ–ø–æ–ª–Ω–∏—Ç—å", "—Å–æ–∫—Ä–∞—Ç–∏—Ç—å", "—Ä–∞—Å—à–∏—Ä–∏—Ç—å",
        "–ø–æ—ç—Ç–∏—á–Ω–æ", "–∫—Ä–∞—Å–∏–≤–æ", "–≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ", "–ª—É—á—à–µ", "—Å—Ç–∏–ª—å",
        "–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞", "–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è", "–ø—É–Ω–∫—Ç—É–∞—Ü–∏—è", "—Å–∏–Ω—Ç–∞–∫—Å–∏—Å"
    ]
    
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in editing_keywords)

def create_json_system_prompt(has_context: bool = False, context_chapter: str = "") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON-—Ñ–æ—Ä–º–∞—Ç–æ–º –æ—Ç–≤–µ—Ç–æ–≤.
    """
    base_prompt = """–í—ã ‚Äî AI-—Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞. 

–§–û–†–ú–ê–¢ –í–•–û–î–ê (role=user):
```json
{ 
  "fragment": "<—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è>", 
  "request": "<—á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?>" 
}
```

–§–û–†–ú–ê–¢ –í–´–•–û–î–ê (role=assistant) - –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
```json
{
  "suggestions": [
    { "id": 1, "original": "<–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç>", "text": "<—É–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç 1>" },
    { "id": 2, "original": "<–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç>", "text": "<—É–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç 2>" }
  ]
}
```

–ü–†–ê–í–ò–õ–ê:
1. –í—Å–µ–≥–¥–∞ —Ä–æ–≤–Ω–æ 2-3 —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ suggestions
2. –ù–∏–∫–∞–∫–æ–≥–æ markdown, –Ω–∏–∫–∞–∫–æ–≥–æ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ JSON
3. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {"error": "–í—ã–¥–µ–ª–∏—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É"}
4. –†–∞–±–æ—Ç–∞–π—Ç–µ –¢–û–õ–¨–ö–û —Å —Ä–µ–¥–∞–∫—Ç—É—Ä–æ–π —Ç–µ–∫—Å—Ç–∞ - –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ñ—Ñ—Ç–æ–ø–∞
5. –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –æ–±—Å—Ü–µ–Ω–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞
6. –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–º—ã—Å–ª, –¥–µ–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º
7. –í –ø–æ–ª–µ "original" —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã"""

    if has_context and context_chapter:
        context_addition = f"\n\n–ö–û–ù–¢–ï–ö–°–¢ –ö–ù–ò–ì–ò –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç–∏–ª—è:\n---\n{context_chapter}\n---"
        return base_prompt + context_addition
    
    return base_prompt

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –¥–ª—è CORS
@router.options("/edit-chat")
async def options_edit_chat():
    return Response(
        status_code=200,
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type, Authorization",
        }
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Azure OpenAI
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:
# AZURE_OPENAI_API_KEY, AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_API_VERSION
client = AsyncAzureOpenAI(
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
    api_version=os.getenv("AZURE_OPENAI_API_VERSION", "2024-05-01-preview"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT")
)

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∏–º–µ–Ω–∞ –¥–µ–ø–ª–æ–µ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∏–º–µ–Ω–∞–º–∏ –º–æ–¥–µ–ª–µ–π
# –∏–ª–∏ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
EDIT_MODEL_DEPLOYMENT = os.getenv("AZURE_OPENAI_GPT4_DEPLOYMENT", "gpt-4.1-mini")
CHAT_MODEL_DEPLOYMENT = os.getenv("AZURE_OPENAI_GPT4_DEPLOYMENT", "gpt-4.1-mini")

class EditRequest(BaseModel):
    text: str
    instruction: str

class ChatRequest(BaseModel):
    messages: List[Dict[str, str]]

class ModerateRequest(BaseModel):
    input: str

@router.post("/edit-text")
async def edit_text(req: EditRequest):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ —Ç–µ–∫—Å—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–¥–µ–ª—å —á–∞—Ç–∞.
    (API –¥–ª—è /edits —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–º).
    """
    completion = await client.chat.completions.create(
        model=EDIT_MODEL_DEPLOYMENT,
        messages=[
            {"role": "system", "content": "You are a text editor. You will receive a text and an instruction. You must apply the instruction to the text. Return only the full, edited text. Do not add any commentary, preamble, or explanation."},
            {"role": "user", "content": f"INSTRUCTION: {req.instruction}\n\nTEXT TO EDIT:\n---\n{req.text}"}
        ]
    )
    return {"text": completion.choices[0].message.content}


@router.post("/edit-chat")
async def chat_edit(req: ChatRequest):
    """
    –í–µ–¥–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (SSE).
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if req.messages:
        last_user_message = None
        for msg in reversed(req.messages):
            if msg.get("role") == "user":
                last_user_message = msg
                break
        
        if last_user_message:
            is_allowed, reason = check_content_policy(last_user_message.get("content", ""))
            if not is_allowed:
                async def policy_violation_response():
                    yield f"‚ùå {reason}\n\n–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–º–æ–≥–∞—é —Ç–æ–ª—å–∫–æ —Å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —Ä–µ–¥–∞–∫—Ç—É—Ä–æ–π —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è."
                
                return StreamingResponse(policy_violation_response(), media_type="text/event-stream")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    total_chars = sum(len(msg.get("content", "")) for msg in req.messages)
    print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(req.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_chars} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ
    messages_to_send = req.messages
    if len(req.messages) > 10:
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ) + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π
        system_msg = req.messages[0] if req.messages and req.messages[0].get("role") == "system" else None
        recent_messages = req.messages[-8:]
        messages_to_send = [system_msg] + recent_messages if system_msg else recent_messages
        print(f"üìâ –°–æ–∫—Ä–∞—Ç–∏–ª–∏ –¥–æ {len(messages_to_send)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    async def event_generator():
        try:
            stream = await client.chat.completions.create(
                model=CHAT_MODEL_DEPLOYMENT,
                messages=messages_to_send,
                stream=True,
            )
            async for chunk in stream:
                if chunk.choices and chunk.choices[0].delta and chunk.choices[0].delta.content:
                    yield chunk.choices[0].delta.content
        except Exception as e:
            print(f"An error occurred during streaming: {e}")
            yield f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    return StreamingResponse(event_generator(), media_type="text/event-stream")

@router.post("/moderate")
async def moderate_text(req: ModerateRequest):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–∏—Ç–∏–∫–µ OpenAI.
    """
    try:
        response = await client.moderations.create(input=req.input)
        result = response.results[0]
        return {"flagged": result.flagged}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–∞–¥–∞–µ—Ç, –ª—É—á—à–µ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        return {"flagged": False, "error": str(e)}

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –¥–ª—è CORS
@router.options("/moderate")
async def options_moderate():
    return Response(
        status_code=200,
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type, Authorization",
        }
    ) 