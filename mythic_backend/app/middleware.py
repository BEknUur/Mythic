import time
import logging
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from app.services.cache_service import cache_service

logger = logging.getLogger(__name__)

class CacheMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    async def dispatch(self, request: Request, call_next):
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        user_id = None
        try:
            from app.auth import get_user_from_request
            user = get_user_from_request(request)
            if user:
                user_id = user.get("sub")
        except:
            pass
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        if user_id:
            endpoint = request.url.path
            await cache_service.increment_request_counter(user_id, endpoint)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è {request.method} {request.url.path} - {execution_time:.3f}s")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if request.url.path.startswith("/static/") or request.url.path.startswith("/view/"):
            response.headers["Cache-Control"] = "public, max-age=3600"  # 1 —á–∞—Å –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        elif request.url.path.startswith("/download/"):
            response.headers["Cache-Control"] = "public, max-age=86400"  # 24 —á–∞—Å–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
        
        return response

class RateLimitMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    async def dispatch(self, request: Request, call_next):
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        user_id = None
        try:
            from app.auth import get_user_from_request
            user = get_user_from_request(request)
            if user:
                user_id = user.get("sub")
        except:
            pass
        
        if user_id:
            endpoint = request.url.path
            request_count = await cache_service.get_request_count(user_id, endpoint)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
            limits = {
                "/start-scrape": 10,  # 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
                "/status/": 100,      # 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
                "/books/my": 50,      # 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
            }
            
            for path, limit in limits.items():
                if endpoint.startswith(path) and request_count > limit:
                    logger.warning(f"üö´ Rate limit exceeded for user {user_id} on {endpoint}")
                    from fastapi import HTTPException
                    raise HTTPException(429, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        return await call_next(request) 