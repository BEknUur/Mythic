import json
import pickle
from typing import Any, Optional, Union
import aioredis
from app.config import settings
import logging

logger = logging.getLogger(__name__)

class RedisService:
    def __init__(self):
        self.redis: Optional[aioredis.Redis] = None
        self._connection_pool = None
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        if not self.redis:
            try:
                self.redis = aioredis.from_url(
                    "redis://redis:6379",
                    encoding="utf-8",
                    decode_responses=True
                )
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                await self.redis.ping()
                logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
                self.redis = None
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis"""
        if self.redis:
            await self.redis.close()
            self.redis = None
    
    async def set(self, key: str, value: Any, expire: int = 3600) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à"""
        if not self.redis:
            await self.connect()
        
        try:
            if isinstance(value, (dict, list)):
                value = json.dumps(value, ensure_ascii=False)
            await self.redis.set(key, value, ex=expire)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Redis: {e}")
            return False
    
    async def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        if not self.redis:
            await self.connect()
        
        try:
            value = await self.redis.get(key)
            if value:
                try:
                    return json.loads(value)
                except (json.JSONDecodeError, TypeError):
                    return value
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Redis: {e}")
            return None
    
    async def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏–∑ –∫—ç—à–∞"""
        if not self.redis:
            await self.connect()
        
        try:
            await self.redis.delete(key)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ Redis: {e}")
            return False
    
    async def exists(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞"""
        if not self.redis:
            await self.connect()
        
        try:
            return await self.redis.exists(key) > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ Redis: {e}")
            return False
    
    async def set_hash(self, key: str, mapping: dict, expire: int = 3600) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö—ç—à –≤ –∫—ç—à"""
        if not self.redis:
            await self.connect()
        
        try:
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON
            serialized_mapping = {}
            for k, v in mapping.items():
                if isinstance(v, (dict, list)):
                    serialized_mapping[k] = json.dumps(v, ensure_ascii=False)
                else:
                    serialized_mapping[k] = str(v)
            
            await self.redis.hset(key, mapping=serialized_mapping)
            await self.redis.expire(key, expire)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ö—ç—à–∞ –≤ Redis: {e}")
            return False
    
    async def get_hash(self, key: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ö—ç—à –∏–∑ –∫—ç—à–∞"""
        if not self.redis:
            await self.connect()
        
        try:
            hash_data = await self.redis.hgetall(key)
            if not hash_data:
                return None
            
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ JSON
            result = {}
            for k, v in hash_data.items():
                try:
                    result[k] = json.loads(v)
                except (json.JSONDecodeError, TypeError):
                    result[k] = v
            
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—ç—à–∞ –∏–∑ Redis: {e}")
            return None
    
    async def increment(self, key: str, amount: int = 1) -> Optional[int]:
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫"""
        if not self.redis:
            await self.connect()
        
        try:
            return await self.redis.incr(key, amount)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –≤ Redis: {e}")
            return None
    
    async def expire(self, key: str, seconds: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞"""
        if not self.redis:
            await self.connect()
        
        try:
            return await self.redis.expire(key, seconds)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –≤ Redis: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis —Å–µ—Ä–≤–∏—Å–∞
redis_service = RedisService()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
def cache_result(prefix: str, expire: int = 3600):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
    def decorator(func):
        async def wrapper(*args, **kwargs):
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            cache_key = f"{prefix}:{hash(str(args) + str(sorted(kwargs.items())))}"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
            cached_result = await redis_service.get(cache_key)
            if cached_result is not None:
                logger.info(f"üì¶ –ö—ç—à HIT –¥–ª—è {cache_key}")
                return cached_result
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            result = await func(*args, **kwargs)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await redis_service.set(cache_key, result, expire)
            logger.info(f"üíæ –ö—ç—à SAVE –¥–ª—è {cache_key}")
            
            return result
        return wrapper
    return decorator 