import json
import logging
from typing import Optional, Dict, Any
from pathlib import Path
from app.services.redis_service import redis_service

logger = logging.getLogger(__name__)

class CacheService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    @staticmethod
    async def cache_processing_status(run_id: str, status_data: Dict[str, Any], ttl: int = 300):
        """–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        cache_key = f"processing_status:{run_id}"
        await redis_service.set(cache_key, status_data, ttl)
        logger.info(f"üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è {run_id}")
    
    @staticmethod
    async def get_processing_status(run_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –∫—ç—à–∞"""
        cache_key = f"processing_status:{run_id}"
        return await redis_service.get(cache_key)
    
    @staticmethod
    async def cache_user_books(user_id: str, books_data: Dict[str, Any], ttl: int = 1800):
        """–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cache_key = f"user_books:{user_id}"
        await redis_service.set(cache_key, books_data, ttl)
        logger.info(f"üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω—ã –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    @staticmethod
    async def get_user_books(user_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
        cache_key = f"user_books:{user_id}"
        return await redis_service.get(cache_key)
    
    @staticmethod
    async def invalidate_user_books(user_id: str):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cache_key = f"user_books:{user_id}"
        await redis_service.delete(cache_key)
        logger.info(f"üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫—ç—à –∫–Ω–∏–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    @staticmethod
    async def cache_book_content(book_id: str, content: str, ttl: int = 7200):
        """–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–∏–≥–∏"""
        cache_key = f"book_content:{book_id}"
        await redis_service.set(cache_key, content, ttl)
        logger.info(f"üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–∏–≥–∏ {book_id}")
    
    @staticmethod
    async def get_book_content(book_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–∏–≥–∏ –∏–∑ –∫—ç—à–∞"""
        cache_key = f"book_content:{book_id}"
        return await redis_service.get(cache_key)
    
    @staticmethod
    async def cache_instagram_data(profile_url: str, data: Dict[str, Any], ttl: int = 3600):
        """–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ Instagram –ø—Ä–æ—Ñ–∏–ª—è"""
        cache_key = f"instagram_data:{hash(profile_url)}"
        await redis_service.set(cache_key, data, ttl)
        logger.info(f"üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ Instagram –¥–ª—è {profile_url}")
    
    @staticmethod
    async def get_instagram_data(profile_url: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Instagram –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –∫—ç—à–∞"""
        cache_key = f"instagram_data:{hash(profile_url)}"
        return await redis_service.get(cache_key)
    
    @staticmethod
    async def cache_ai_response(prompt: str, response: str, ttl: int = 1800):
        """–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã AI"""
        cache_key = f"ai_response:{hash(prompt)}"
        await redis_service.set(cache_key, response, ttl)
        logger.info(f"üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç AI –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞")
    
    @staticmethod
    async def get_ai_response(prompt: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç AI –∏–∑ –∫—ç—à–∞"""
        cache_key = f"ai_response:{hash(prompt)}"
        return await redis_service.get(cache_key)
    
    @staticmethod
    async def increment_request_counter(user_id: str, endpoint: str):
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cache_key = f"request_count:{user_id}:{endpoint}"
        count = await redis_service.increment(cache_key)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –Ω–∞ 1 —á–∞—Å
        await redis_service.expire(cache_key, 3600)
        return count
    
    @staticmethod
    async def get_request_count(user_id: str, endpoint: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cache_key = f"request_count:{user_id}:{endpoint}"
        count = await redis_service.get(cache_key)
        return int(count) if count else 0
    
    @staticmethod
    async def cache_file_metadata(run_id: str, file_type: str, metadata: Dict[str, Any], ttl: int = 7200):
        """–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤"""
        cache_key = f"file_metadata:{run_id}:{file_type}"
        await redis_service.set(cache_key, metadata, ttl)
        logger.info(f"üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ {file_type} –¥–ª—è {run_id}")
    
    @staticmethod
    async def get_file_metadata(run_id: str, file_type: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –∏–∑ –∫—ç—à–∞"""
        cache_key = f"file_metadata:{run_id}:{file_type}"
        return await redis_service.get(cache_key)
    
    @staticmethod
    async def clear_run_cache(run_id: str):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ run_id"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å run_id
        pattern = f"*:{run_id}:*"
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SCAN –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
        keys_to_delete = [
            f"processing_status:{run_id}",
            f"file_metadata:{run_id}:html",
            f"file_metadata:{run_id}:pdf",
            f"file_metadata:{run_id}:images"
        ]
        
        for key in keys_to_delete:
            await redis_service.delete(key)
        
        logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è {run_id}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
cache_service = CacheService() 