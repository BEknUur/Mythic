# app/services/flipbook_builder.py
import json
from pathlib import Path
from jinja2 import Environment, FileSystemLoader
import markdown
import base64

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
from app.services.llm_client import generate_flipbook_json
from app.config import settings

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –ø–∞–ø–∫–∏ app/templates
env = Environment(loader=FileSystemLoader('app/templates'))

def image_to_base64_data_uri(image_path: Path) -> str:
    """–ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É Base64 –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ HTML."""
    try:
        with open(image_path, "rb") as image_file:
            encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
            extension = image_path.suffix.lower().replace('.', '')
            if extension == 'jpg':
                extension = 'jpeg'
            return f"data:image/{extension};base64,{encoded_string}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        return ""

async def generate_flipbook_data(run_id: str, image_paths: list[str]) -> dict:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∞–µ—Ç JSON –æ—Ç LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
    """
    print("üìö –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–ª–∏–ø–±—É–∫–∞ —É LLM...")
    
    if not image_paths:
        print("‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–ª–∏–ø–±—É–∫–∞.")
        return {}

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å function calling
    flipbook_content = await generate_flipbook_json(image_paths)

    if not flipbook_content or "pages" not in flipbook_content:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç LLM.")
        return {}

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º markdown –≤ HTML –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
    if "prologue" in flipbook_content:
        flipbook_content["prologue"] = markdown.markdown(flipbook_content["prologue"])
    
    for page in flipbook_content.get("pages", []):
        if "text" in page:
            page["text"] = markdown.markdown(page["text"])

    print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–ª–∏–ø–±—É–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
    return flipbook_content


def build_flipbook_html(run_id: str, data: dict):
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç HTML-—Ñ–ª–∏–ø–±—É–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ª–æ–≥ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã).
    """
    if not data or "pages" not in data:
        print("Ô∏èÔ∏è‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±–æ—Ä–∫–∏ HTML —Ñ–ª–∏–ø–±—É–∫–∞.")
        return

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í BASE64 ---
    run_dir = Path('data') / run_id
    for page in data.get("pages", []):
        image_filename = page.get("image")
        if image_filename:
            image_path = run_dir / "images" / image_filename
            if image_path.exists():
                page["image"] = image_to_base64_data_uri(image_path)
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
                page["image"] = "" # –û–±–Ω—É–ª—è–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    # --------------------------------------------

    tpl = env.get_template('flipbook_template.html')
    
    # –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω, –≤–∫–ª—é—á–∞—è –±–∞–∑–æ–≤—ã–π URL –±—ç–∫–µ–Ω–¥–∞
    html = tpl.render(
        run_id=run_id,
        prologue=data.get("prologue", "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å..."),
        pages=data.get("pages", []),
        backend_base=settings.BACKEND_BASE
    )
    
    out = Path('data') / run_id / 'book.html'
    out.parent.mkdir(parents=True, exist_ok=True)
    out.write_text(html, encoding='utf-8')
    print(f"‚úÖ Flipbook HTML —Å–æ–∑–¥–∞–Ω: {out}") 