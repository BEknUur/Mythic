# app/services/flipbook_builder.py
import json
from pathlib import Path
from jinja2 import Environment, FileSystemLoader
import markdown
import re
import base64

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ llm_client
from app.services.llm_client import async_client, settings

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –ø–∞–ø–∫–∏ app/templates
env = Environment(loader=FileSystemLoader('app/templates'))

def _get_profile_context(run_id: str) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç posts.json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ –ø—Ä–æ—Ñ–∏–ª–µ."""
    posts_path = Path('data') / run_id / 'posts.json'
    if not posts_path.exists():
        print(f"‚ö†Ô∏è posts.json –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {run_id}")
        return {}

    try:
        posts_data = json.loads(posts_path.read_text(encoding='utf-8'))
        if not posts_data:
            return {}

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ)
        profile = posts_data[0]
        return {
            "username": profile.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"),
            "full_name": profile.get("fullName", ""),
            "bio": profile.get("biography", ""),
            "captions": [p.get('caption', '') for p in profile.get('latestPosts', [])[:5] if p.get('caption')]
        }
    except (json.JSONDecodeError, IndexError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ posts.json –¥–ª—è {run_id}: {e}")
        return {}


async def _generate_book_content_from_llm(image_names: list[str], context: dict) -> list[dict]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–Ω–∏–≥–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ç–µ–∫—Å—Ç, –ø–æ–¥–ø–∏—Å–∏) —Å –ø–æ–º–æ—â—å—é LLM.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """
    system_prompt = f"""
–¢—ã ‚Äî —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –ø–∏—Å–∞—Ç–µ–ª—å-–Ω–æ–≤–µ–ª–ª–∏—Å—Ç –∏ –ø–æ—ç—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –≥–ª—É–±–æ–∫–æ–µ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è.

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ, –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ—Å–≤—è—â–µ–Ω–∞ –∫–Ω–∏–≥–∞:**
- **–ò–º—è:** {context.get('full_name') or context.get('username')}
- **–ù–∏–∫–Ω–µ–π–º:** @{context.get('username')}
- **–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (bio):** {context.get('bio', '...')}
- **–ü—Ä–∏–º–µ—Ä—ã –µ–≥–æ/–µ–µ –º—ã—Å–ª–µ–π (–ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ):** {json.dumps(context.get('captions', []), ensure_ascii=False)}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –º–∏–Ω–∏-–Ω–æ–≤–µ–ª–ª—É. –û–±—Ä–∞—â–∞–π—Å—è –∫ —á–µ–ª–æ–≤–µ–∫—É –ª–∏—á–Ω–æ, –Ω–∞ "—Ç—ã". –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º.

**–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–Ω–∏–º–∫–∞ –ø—Ä–∏–¥—É–º–∞–π:**
- **–ó–∞–≥–æ–ª–æ–≤–æ–∫ (5‚Äì8 —Å–ª–æ–≤):** –ö—Ä–∞—Ç–∫–∏–π, –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π –∏ –ø–æ—ç—Ç–∏—á–Ω—ã–π.
- **–†–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ø—Ä–æ–∑–µ (–º–∏–Ω–∏–º—É–º 400-600 —Å–ª–æ–≤):** –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑ —Å –¥–µ—Ç–∞–ª—è–º–∏, —ç–º–æ—Ü–∏—è–º–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –º–æ–Ω–æ–ª–æ–≥–∞–º–∏ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏, –∏ –∫—Ä–∞—Å–∏–≤—ã–º–∏ –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏. –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –Ω–æ–≤–µ–ª–ª–∞, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ.
- **–ö–æ—Ä–æ—Ç–∫—É—é, –Ω–æ —ë–º–∫—É—é –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ —Ñ–æ—Ç–æ (10‚Äì15 —Å–ª–æ–≤):** –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω—è—Ç—å, –∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç.

–ö—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ JSON-–æ–±—ä–µ–∫—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –º–∞—Å—Å–∏–≤ `pages`. –ù–∏–∫–∞–∫–æ–≥–æ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ JSON.
–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
{{"title": "...", "text": "...", "image": "...", "caption": "..."}}
    """.strip()

    user_prompt = f"""
–°–æ–∑–¥–∞–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {json.dumps(image_names)}.
–£–±–µ–¥–∏—Å—å, —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –≤ JSON-–º–∞—Å—Å–∏–≤–µ.
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∏—Ç–æ–≥–æ–≤–æ–º JSON-–º–∞—Å—Å–∏–≤–µ `pages` –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ {len(image_names)}.
    """.strip()

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt}
    ]

    print("üìö –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∑–∞–ø—Ä–æ—Å –∫ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–µ–ª–ª...")
    resp = await async_client.chat.completions.create(
        model=settings.AZURE_OPENAI_GPT4_DEPLOYMENT,
        messages=messages,
        temperature=0.8,
        max_tokens=4000, # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        response_format={"type": "json_object"} # –ü—Ä–æ—Å–∏–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
    )

    raw_content = resp.choices[0].message.content.strip()
    print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM.")

    try:
        # LLM –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å JSON-–æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, "pages" –∏–ª–∏ "book"
        data = json.loads(raw_content)
        # –ò—â–µ–º –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫
        for key in data:
            if isinstance(data[key], list):
                return data[key]
        # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç, –Ω–æ —Å–∞–º –æ—Ç–≤–µ—Ç - —Å–ø–∏—Å–æ–∫
        if isinstance(data, list):
             return data
        raise ValueError("–í JSON-–æ—Ç–≤–µ—Ç–µ –æ—Ç LLM –Ω–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü.")
    except (json.JSONDecodeError, ValueError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM: {e}. –û—Ç–≤–µ—Ç:\n{raw_content}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–∞–¥–µ–Ω–∏—è
        return []


async def generate_flipbook_data(run_id: str, image_paths: list[str]) -> dict:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∞–µ—Ç JSON –æ—Ç LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
    """
    print("üìö –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–ª–∏–ø–±—É–∫–∞ —É LLM...")
    
    if not image_paths:
        print("‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–ª–∏–ø–±—É–∫–∞.")
        return {}

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_context = _get_profile_context(run_id)
    if not profile_context:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –º–µ–Ω–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π.")

    image_names = [Path(p).name for p in image_paths]
    pages_content = await _generate_book_content_from_llm(image_names, profile_context)

    if not pages_content:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç LLM.")
        return {}
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    image_path_map = {Path(p).name: p for p in image_paths}
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º markdown –≤ HTML –∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Base64
    for page in pages_content:
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_name = page.get("image")
        if image_name in image_path_map:
            try:
                with open(image_path_map[image_name], "rb") as image_file:
                    encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                extension = Path(image_name).suffix.lower().replace('.', '')
                if extension == 'jpg': extension = 'jpeg'
                page["image"] = f"data:image/{extension};base64,{encoded_string}"
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_name}: {e}")
                page["image"] = "" # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        else:
            page["image"] = ""

        if "text" in page:
            page["text"] = markdown.markdown(page["text"])
        if "title" in page:
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å
             page["title"] = markdown.markdown(f"## {page['title']}")


    print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–ª–∏–ø–±—É–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç build_flipbook_html
    return {"pages": pages_content, "prologue": ""}


def build_flipbook_html(run_id: str, data: dict):
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç HTML-—Ñ–ª–∏–ø–±—É–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ª–æ–≥ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã).
    """
    if not data or "pages" not in data:
        print("Ô∏èÔ∏è‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±–æ—Ä–∫–∏ HTML —Ñ–ª–∏–ø–±—É–∫–∞.")
        return

    tpl = env.get_template('flipbook_template.html')
    
    # –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    html = tpl.render(
        run_id=run_id, # run_id –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫, –Ω–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ
        prologue=data.get("prologue", ""),
        pages=data.get("pages", [])
    )
    
    out = Path('data') / run_id / 'book.html'
    out.parent.mkdir(parents=True, exist_ok=True)
    out.write_text(html, encoding='utf-8')
    print(f"‚úÖ Flipbook HTML —Å–æ–∑–¥–∞–Ω: {out}") 