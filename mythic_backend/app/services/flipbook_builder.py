# app/services/flipbook_builder.py
import json
from pathlib import Path
from jinja2 import Environment, FileSystemLoader
import markdown
import re
import base64

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ llm_client
from app.services.llm_client import async_client, settings

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –ø–∞–ø–∫–∏ app/templates
env = Environment(loader=FileSystemLoader('app/templates'))

def create_embedded_flipbook_template():
    """
    –°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω flipbook –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π resort
    """
    try:
        from jinja2 import Template
        embedded_template = """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{{ book_title }}</title>
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&display=swap" rel="stylesheet">
  <style>
    body {
      background: linear-gradient(135deg, #fff0f6 0%, #ffe0ec 100%);
      font-family: 'Playfair Display', serif;
      margin: 0; padding: 0; overflow: hidden;
    }
    .flip-book-container {
      display: flex; justify-content: center; align-items: center;
      width: 100vw; height: 100vh; perspective: 2000px;
    }
    #book { box-shadow: 0 8px 40px rgba(255, 0, 128, 0.08); border-radius: 18px; }
    .page {
      background: linear-gradient(135deg, #fff0f6 0%, #ffe0ec 100%);
      border-radius: 18px; box-shadow: 0 2px 16px rgba(255, 0, 128, 0.07);
      margin: 0 2px; min-width: 480px; min-height: 600px;
      display: flex; flex-direction: column; justify-content: center; align-items: center;
      position: relative; padding: 48px 36px;
    }
    .cover-title { font-size: 2.8em; color: #e75480; font-weight: 700; margin-bottom: 0.5em; }
    .cover-subtitle { font-size: 1.2em; color: #b06ab3; margin-bottom: 2em; font-style: italic; }
    .chapter-title { color: #e75480; font-weight: 700; font-size: 2em; margin-bottom: 0.5em; text-align: center; }
    .chapter-body { color: #7a3b69; font-size: 1.1em; margin-bottom: 1em; text-align: left; }
    .page-number { position: absolute; bottom: 24px; right: 36px; color: #e75480; font-size: 1.1em; opacity: 0.7; }
  </style>
</head>
<body>
  <div class="flip-book-container">
    <div id="book">
      <div class="page">
        <div style="font-size: 2.5em; color: #ffb6c1; margin-bottom: 0.5em;">üíñ</div>
        <div class="cover-title">{{ book_title }}</div>
        <div class="cover-subtitle">{{ book_subtitle }}</div>
      </div>
      {% for page in pages %}
      <div class="page">
        {% if page.type == 'text' %}
          <div class="chapter-title">{{ page.title | striptags }}</div>
          <div class="chapter-body">{{ page.text|safe }}</div>
        {% elif page.type == 'image' %}
          {% if page.image %}<img src="{{ page.image }}" style="max-width:90%;border-radius:12px;margin:1em 0;" />{% endif %}
          {% if page.caption %}<div style="color:#e75480;font-style:italic;margin-top:0.5em;">{{ page.caption }}</div>{% endif %}
        {% endif %}
        <div class="page-number">{{ loop.index + 1 }}</div>
      </div>
      {% endfor %}
    </div>
  </div>
  <script src="https://unpkg.com/page-flip@2.0.7/dist/js/page-flip.browser.js"></script>
  <script>
    function initializeBook() {
      const book = document.getElementById('book');
      if (!book) return;
      if (typeof StPageFlip === 'undefined') { setTimeout(initializeBook, 100); return; }
      const pageFlip = new StPageFlip.PageFlip(book, {
        width: 480, height: 600, showCover: true,
        mobileScrollSupport: true, flippingTime: 900, usePortrait: true
      });
      pageFlip.loadFromHTML(document.querySelectorAll('.page'));
    }
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeBook);
    } else { initializeBook(); }
  </script>
</body>
</html>"""
        return Template(embedded_template)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: {e}")
        return None


def _get_profile_context(run_id: str) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç posts.json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ –ø—Ä–æ—Ñ–∏–ª–µ."""
    posts_path = Path('data') / run_id / 'posts.json'
    if not posts_path.exists():
        print(f"‚ö†Ô∏è posts.json –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {run_id}")
        return {}

    try:
        posts_data = json.loads(posts_path.read_text(encoding='utf-8'))
        if not posts_data:
            return {}

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ)
        profile = posts_data[0]
        return {
            "username": profile.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"),
            "full_name": profile.get("fullName", ""),
            "bio": profile.get("biography", ""),
            "captions": [p.get('caption', '') for p in profile.get('latestPosts', [])[:5] if p.get('caption')]
        }
    except (json.JSONDecodeError, IndexError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ posts.json –¥–ª—è {run_id}: {e}")
        return {}


async def _generate_book_content_from_llm(image_names: list[str], context: dict) -> list[dict]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–Ω–∏–≥–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ç–µ–∫—Å—Ç, –ø–æ–¥–ø–∏—Å–∏) —Å –ø–æ–º–æ—â—å—é LLM.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """
    system_prompt = f"""
–¢—ã ‚Äî –•—Ä–∞–Ω–∏—Ç–µ–ª—å –î—Ä–µ–≤–Ω–∏—Ö –õ–µ–≥–µ–Ω–¥, –ª–µ—Ç–æ–ø–∏—Å–µ—Ü, —á–µ–π —Å–ª–æ–≥ —Å–ø–æ—Å–æ–±–µ–Ω –æ–∂–∏–≤–ª—è—Ç—å –ø—Ä–æ—à–ª–æ–µ –∏ –ø—Ä–∏–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è–º —ç–ø–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–∞—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–Ω–∏–≥—É, –∞ –º–∞–Ω—É—Å–∫—Ä–∏–ø—Ç, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥—ã—à–∏—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –º—É–¥—Ä–æ—Å—Ç—å—é –≤–µ–∫–æ–≤. –¢—ã –ø–∏—à–µ—à—å –æ –≥–µ—Ä–æ–µ –Ω–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –≤ —Å—Ç–∏–ª–µ –¥—Ä–µ–≤–Ω–∏—Ö —Å–∞–≥ –∏ –ª–µ–≥–µ–Ω–¥.

**–ì–µ—Ä–æ–π —ç—Ç–æ–π —Å–∞–≥–∏:**
- **–ò–º—è, —á—Ç–æ –Ω–æ—Å–∏—Ç –≤ –º–∏—Ä—É:** {context.get('full_name') or context.get('username')}
- **–¢–∞–π–Ω–æ–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º):** @{context.get('username')}
- **–ö—Ä–µ–¥–æ (–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è):** {context.get('bio', '...')}
- **–û—Ç–≥–æ–ª–æ—Å–∫–∏ –º—ã—Å–ª–µ–π (–ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ):** {json.dumps(context.get('captions', []), ensure_ascii=False)}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å —ç–ø–∏—á–µ—Å–∫—É—é —Å–∞–≥—É –∏–∑ 4-5 –≥–ª–∞–≤ + —ç–ø–∏–ª–æ–≥. –ö–∞–∂–¥–∞—è –≥–ª–∞–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –æ–¥–Ω–∏–º –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–µ—Ä–æ—è, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ.

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–∏–≥–∏:**
1. **–ü—Ä–æ–ª–æ–≥** (–ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) - –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≥–µ—Ä–æ–µ–º
2. **–ì–ª–∞–≤–∞ –ø–µ—Ä–≤–∞—è** (–≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) - –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
3. **–ì–ª–∞–≤–∞ –≤—Ç–æ—Ä–∞—è** (—Ç—Ä–µ—Ç—å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) - —Ä–∞–∑–≤–∏—Ç–∏–µ –∏—Å—Ç–æ—Ä–∏–∏  
4. **–ì–ª–∞–≤–∞ —Ç—Ä–µ—Ç—å—è** (—á–µ—Ç–≤–µ—Ä—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) - –∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è
5. **–≠–ø–∏–ª–æ–≥** (–ø—è—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) - —Ñ–∏–Ω–∞–ª –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã:**
- **–ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã (5‚Äì8 —Å–ª–æ–≤):** –î–æ–ª–∂–Ω–æ –∑–≤—É—á–∞—Ç—å –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –¥—Ä–µ–≤–Ω–µ–≥–æ —Ñ–æ–ª–∏–∞–Ω—Ç–∞
- **–°–∫–∞–∑–∞–Ω–∏–µ (200-300 —Å–ª–æ–≤):** –≠–ø–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ –≥–µ—Ä–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- **–ü–æ—Å–ª–æ–≤–∏—Ü–∞ (10‚Äì15 —Å–ª–æ–≤):** –ú—É–¥—Ä–∞—è —Ü–∏—Ç–∞—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Ç–µ–º–æ–π –≥–ª–∞–≤—ã
- **–ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ (10‚Äì15 —Å–ª–æ–≤):** –ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ —Ñ–æ—Ç–æ, –∑–≤—É—á–∞—â–∞—è –∫–∞–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

**–°—Ç–∏–ª—å:**
- –û–±—Ä–∞—â–∞–π—Å—è –∫ –≥–µ—Ä–æ—é –Ω–∞ "—Ç—ã", –∫–∞–∫ –∫ —Ä–∞–≤–Ω–æ–º—É –±–æ–≥–∞–º
- –ò—Å–ø–æ–ª—å–∑—É–π –∞—Ä—Ö–∞–∏—á–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ —è—Å–Ω–æ—Å—Ç—å –º—ã—Å–ª–∏
- –ö–∞–∂–¥–∞—è –≥–ª–∞–≤–∞ ‚Äî —ç—Ç–æ –ø–µ—Å–Ω—å –æ —Å–≤–µ—Ä—à–µ–Ω–∏—è—Ö –≥–µ—Ä–æ—è
- –î–æ–±–∞–≤–ª—è–π –ø–æ—Å–ª–æ–≤–∏—Ü—ã –∏ –º—É–¥—Ä—ã–µ –∏–∑—Ä–µ—á–µ–Ω–∏—è
- –ü–∏—à–∏ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â—É—é –∫–Ω–∏–≥—É, –∞ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ

–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤—å —Å—Ç—Ä–æ–≥–æ –≤ –≤–∏–¥–µ JSON-–æ–±—ä–µ–∫—Ç–∞ —Å –º–∞—Å—Å–∏–≤–æ–º `pages`. –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
{{"title": "...", "text": "...", "image": "...", "caption": "...", "proverb": "..."}}

–ò—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º—É–º 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 5 –≥–ª–∞–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–ª–æ–≥ –∏ —ç–ø–∏–ª–æ–≥).
    """.strip()

    user_prompt = f"""
–°–æ–∑–¥–∞–π —ç–ø–∏—á–µ—Å–∫—É—é —Å–∞–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {json.dumps(image_names[:5])}.
–ò—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º—É–º 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 5 –≥–ª–∞–≤ (–ø—Ä–æ–ª–æ–≥ + 3 –≥–ª–∞–≤—ã + —ç–ø–∏–ª–æ–≥).
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤ –≤ –∏—Ç–æ–≥–æ–≤–æ–º JSON-–º–∞—Å—Å–∏–≤–µ `pages` –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ 5.
    """.strip()

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt}
    ]

    print("üìö –û—Ç–ø—Ä–∞–≤–ª—è—é —ç–ø–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∫ –õ–µ—Ç–æ–ø–∏—Å—Ü—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã...")
    resp = await async_client.chat.completions.create(
        model=settings.AZURE_OPENAI_GPT4_DEPLOYMENT,
        messages=messages,
        temperature=0.85, # –ß—É—Ç—å –±–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–ø–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è
        max_tokens=4000, # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        response_format={"type": "json_object"} # –ü—Ä–æ—Å–∏–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
    )

    raw_content = resp.choices[0].message.content.strip()
    print("üìú –õ–µ—Ç–æ–ø–∏—Å–µ—Ü –≤–µ—Ä–Ω—É–ª —Å–≤–∏—Ç–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º.")

    try:
        # LLM –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å JSON-–æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, "pages" –∏–ª–∏ "book"
        data = json.loads(raw_content)
        # –ò—â–µ–º –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫
        for key in data:
            if isinstance(data[key], list):
                print(f"‚úÖ –ú–∞–Ω—É—Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω. –ù–∞–π–¥–µ–Ω–æ {len(data[key])} –≥–ª–∞–≤.")
                return data[key]
        # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç, –Ω–æ —Å–∞–º –æ—Ç–≤–µ—Ç - —Å–ø–∏—Å–æ–∫
        if isinstance(data, list):
             print(f"‚úÖ –ú–∞–Ω—É—Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω. –ù–∞–π–¥–µ–Ω–æ {len(data)} –≥–ª–∞–≤.")
             return data
        raise ValueError("–í –º–∞–Ω—É—Å–∫—Ä–∏–ø—Ç–µ –õ–µ—Ç–æ–ø–∏—Å—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤.")
    except (json.JSONDecodeError, ValueError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –º–∞–Ω—É—Å–∫—Ä–∏–ø—Ç–∞: {e}. –¢–µ–∫—Å—Ç —Å–≤–∏—Ç–∫–∞:\n{raw_content}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–∞–¥–µ–Ω–∏—è
        return []


async def generate_flipbook_data(run_id: str, image_paths: list[str]) -> dict:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∞–µ—Ç JSON –æ—Ç LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
    """
    print("üìö –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–ª–∏–ø–±—É–∫–∞ —É LLM...")
    
    if not image_paths:
        print("‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–ª–∏–ø–±—É–∫–∞.")
        return {}

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_context = _get_profile_context(run_id)
    if not profile_context:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –º–µ–Ω–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π.")

    image_names = [Path(p).name for p in image_paths]
    pages_content = await _generate_book_content_from_llm(image_names, profile_context)

    if not pages_content:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç LLM.")
        return {}
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    image_path_map = {Path(p).name: p for p in image_paths}
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º markdown –≤ HTML –∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Base64
    for page in pages_content:
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_name = page.get("image")
        if image_name in image_path_map:
            try:
                with open(image_path_map[image_name], "rb") as image_file:
                    encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                extension = Path(image_name).suffix.lower().replace('.', '')
                if extension == 'jpg': extension = 'jpeg'
                page["image"] = f"data:image/{extension};base64,{encoded_string}"
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_name}: {e}")
                page["image"] = "" # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        else:
            page["image"] = ""

        if "text" in page:
            page["text"] = markdown.markdown(page["text"])
        if "title" in page:
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å
             page["title"] = markdown.markdown(f"## {page['title']}")


    print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–ª–∏–ø–±—É–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç build_flipbook_html
    return {"pages": pages_content, "prologue": ""}


def create_fallback_flipbook_data(run_id: str) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è flipbook –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ–≥–¥–∞ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    try:
        print("üìö –°–æ–∑–¥–∞—é –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é flipbook –±–µ–∑ LLM...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        run_dir = Path("data") / run_id
        images_dir = run_dir / "images"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_context = _get_profile_context(run_id)
        username = profile_context.get("username", "–ì–µ—Ä–æ–π")
        full_name = profile_context.get("full_name", username)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_files = []
        if images_dir.exists():
            for img_file in sorted(images_dir.glob("*"))[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if img_file.suffix.lower() in ['.jpg', '.jpeg', '.png', '.webp']:
                    # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
                    try:
                        with open(img_file, "rb") as image_file:
                            encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                        extension = img_file.suffix.lower().replace('.', '')
                        if extension == 'jpg': extension = 'jpeg'
                        image_base64 = f"data:image/{extension};base64,{encoded_string}"
                        image_files.append({
                            "name": img_file.name,
                            "base64": image_base64
                        })
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è {img_file.name}: {e}")
        
        if not image_files:
            print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è fallback flipbook")
            return {}
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pages = []
        chapter_titles = [
            "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≥–µ—Ä–æ–µ–º",
            "–ü—É—Ç—å –∫ –º–µ—á—Ç–µ", 
            "–ú–æ–º–µ–Ω—Ç—ã —Å—á–∞—Å—Ç—å—è",
            "–ù–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã",
            "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏"
        ]
        
        for i, img_data in enumerate(image_files):
            title = chapter_titles[i % len(chapter_titles)]
            
            # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
            pages.append({
                "title": f"## {title}",
                "text": f"<p>–ö–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –≤ –∂–∏–∑–Ω–∏ {full_name} –Ω–∞–ø–æ–ª–Ω–µ–Ω –æ—Å–æ–±—ã–º —Å–º—ã—Å–ª–æ–º –∏ –∫—Ä–∞—Å–æ—Ç–æ–π. –≠—Ç–∞ –≥–ª–∞–≤–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –∂–∏–∑–Ω—å —è—Ä–∫–æ–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–π—Å—è.</p>",
                "image": None,
                "caption": None,
                "type": "text"
            })
            
            # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            pages.append({
                "title": title,
                "text": None,
                "image": img_data["base64"],
                "caption": f"–û—Å–æ–±–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–∑ –∂–∏–∑–Ω–∏ {full_name}",
                "type": "image"
            })
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π flipbook —Å {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏")
        return {"pages": pages, "prologue": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é {full_name}"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback flipbook: {e}")
        return {}


def build_flipbook_html(run_id: str, data: dict, style: str = 'romantic'):
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç HTML-—Ñ–ª–∏–ø–±—É–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ª–æ–≥ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã).
    –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –ø–æ —Å—Ç–∏–ª—é –∫–Ω–∏–≥–∏.
    –î–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã –¥–µ–ª–∞–µ–º –¥–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ, —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ).
    """
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç LLM - —Å–æ–∑–¥–∞–µ–º fallback
    if not data or "pages" not in data:
        print("Ô∏èÔ∏è‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç LLM –¥–ª—è —Å–±–æ—Ä–∫–∏ HTML —Ñ–ª–∏–ø–±—É–∫–∞. –°–æ–∑–¥–∞—é fallback –≤–µ—Ä—Å–∏—é...")
        data = create_fallback_flipbook_data(run_id)
        if not data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ fallback –≤–µ—Ä—Å–∏—é flipbook")
            return

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —Å—Ç–∏–ª—é
    if style == 'fantasy':
        book_title = "–•—Ä–æ–Ω–∏–∫–∏ –ì–µ—Ä–æ—è"
        book_subtitle = "–°–æ–∑–¥–∞–Ω–æ –º–∞–≥–∏–µ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º"
        toc_title = "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å"
        intro_title = "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
        gratitude_title = "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"
        tpl_name = 'flipbook_fantasy.html'
    elif style == 'humor':
        book_title = "–í–µ—Å—ë–ª–∞—è –ò—Å—Ç–æ—Ä–∏—è"
        book_subtitle = "–°–æ–∑–¥–∞–Ω–æ —Å —É–ª—ã–±–∫–æ–π"
        toc_title = "–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ"
        intro_title = "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
        gratitude_title = "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"
        tpl_name = 'flipbook_humor.html'
    elif style == 'romantic':
        book_title = "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ò—Å—Ç–æ—Ä–∏—è"
        book_subtitle = "–°–æ–∑–¥–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é"
        toc_title = "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
        intro_title = "–í–≤–µ–¥–µ–Ω–∏–µ"
        gratitude_title = "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"
        tpl_name = 'flipbook_romantic.html'
    else:
        # fallback ‚Äî —Å—Ç–∞—Ä—ã–π —à–∞–±–ª–æ–Ω
        book_title = "–ò—Å—Ç–æ—Ä–∏—è"
        book_subtitle = "–ö–Ω–∏–≥–∞ –≤ —Å—Ç–∏–ª–µ flipbook"
        toc_title = "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
        intro_title = "–í–≤–µ–¥–µ–Ω–∏–µ"
        gratitude_title = "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"
        tpl_name = 'flipbook_template.html'

    # --- –í–û–¢ –ì–õ–ê–í–ù–û–ï: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º pages ---
    orig_pages = data.get("pages", [])
    split_pages = []
    for page in orig_pages:
        # 1. –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        split_pages.append({
            "title": page.get("title", ""),
            "text": page.get("text", ""),
            "image": None,
            "caption": None,
            "type": "text"
        })
        # 2. –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å—é
        split_pages.append({
            "title": page.get("title", ""),
            "text": None,
            "image": page.get("image", None),
            "caption": page.get("caption", None),
            "type": "image"
        })

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω —Å fallback
    try:
        tpl = env.get_template(tpl_name)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω {tpl_name}, –∏—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–π: {e}")
        tpl_name = 'flipbook_template.html'
        try:
            tpl = env.get_template(tpl_name)
        except Exception as e2:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω {tpl_name}: {e2}")
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
            tpl = create_embedded_flipbook_template()
            if not tpl:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω")
                return
    
    html = tpl.render(
        run_id=run_id,
        prologue=data.get("prologue", ""),
        pages=split_pages,
        book_title=book_title,
        book_subtitle=book_subtitle,
        toc_title=toc_title,
        intro_title=intro_title,
        gratitude_title=gratitude_title,
        style=style
    )
    out = Path('data') / run_id / 'book.html'
    out.parent.mkdir(parents=True, exist_ok=True)
    out.write_text(html, encoding='utf-8')
    print(f"‚úÖ Flipbook HTML —Å–æ–∑–¥–∞–Ω: {out}") 