import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress as ProgressBar } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useToast } from '@/hooks/use-toast';
import { CheckCircle, Eye, Download, RotateCcw, Loader2, RefreshCw, ExternalLink, AlertTriangle } from 'lucide-react';
import { api, type StatusResponse } from '@/lib/api';

interface ProgressTrackerProps {
  runId: string;
  onComplete: () => void;
  onReset: () => void;
}

export function ProgressTracker({ runId, onComplete, onReset }: ProgressTrackerProps) {
  const [status, setStatus] = useState<StatusResponse | null>(null);
  const [error, setError] = useState('');
  const [isComplete, setIsComplete] = useState(false);
  const [isManualChecking, setIsManualChecking] = useState(false);
  const [lastChecked, setLastChecked] = useState<Date | null>(null);
  const [showInlineViewer, setShowInlineViewer] = useState(false);
  const [bookContent, setBookContent] = useState<string>('');
  const [isLoadingBook, setIsLoadingBook] = useState(false);
  const [showIframeViewer, setShowIframeViewer] = useState(false);
  const { toast } = useToast();

  const checkStatusManually = async () => {
    setIsManualChecking(true);
    try {
      console.log(`Manual status check for runId: ${runId}`);
      const currentStatus = await api.getStatus(runId);
      console.log('Received status:', currentStatus);
      console.log('Book generated stage:', currentStatus.stages.book_generated);
      console.log('Files object:', currentStatus.files);
      
      setStatus(currentStatus);
      setError('');
      setLastChecked(new Date());
      
      if (currentStatus.stages.book_generated) {
        setIsComplete(true);
        onComplete();
        toast({
          title: "üíï –í–∞—à–∞ –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞!",
          description: "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å",
        });
      } else {
        toast({
          title: "‚è≥ –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π",
          description: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—é–∂–µ—Ç",
        });
      }
    } catch (error) {
      console.error('Manual status check error:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞');
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏",
        variant: "destructive",
      });
    } finally {
      setIsManualChecking(false);
    }
  };

  useEffect(() => {
    let retryCount = 0;
    const maxRetries = 3; // –£–º–µ–Ω—å—à–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    
    const pollStatus = async () => {
      try {
        console.log(`Polling status for runId: ${runId}`);
        const currentStatus = await api.getStatus(runId);
        setStatus(currentStatus);
        setError('');
        retryCount = 0;
        
        if (currentStatus.stages.book_generated && !isComplete) {
          setIsComplete(true);
          onComplete();
          toast({
            title: "üéâ –ò—Å—Ç–æ—Ä–∏—è –ª—é–±–≤–∏ –≥–æ—Ç–æ–≤–∞!",
            description: "–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞",
          });
        }
      } catch (error) {
        retryCount++;
        console.error(`Error polling status (attempt ${retryCount}):`, error);
        
        if (retryCount >= maxRetries) {
          setError('–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      }
    };

    pollStatus();
    
    const interval = setInterval(() => {
      if (!isComplete && retryCount < maxRetries) {
        pollStatus();
      }
    }, 5000); // –£–≤–µ–ª–∏—á–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 5 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [runId, isComplete, onComplete, toast]);

  const getProgress = () => {
    if (!status) return 0;
    
    if (status.stages.book_generated) return 100;
    if (status.stages.images_downloaded) return 66;
    if (status.stages.data_collected) return 33;
    return 0;
  };

  const getCurrentStep = () => {
    if (!status) return '–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Instagram... üîó';
    
    if (status.stages.book_generated) return '–í–∞—à–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞! ‚ú®';
    if (status.stages.images_downloaded) return '–°–æ–∑–¥–∞–µ–º –≤–∞—à—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ª—é–±–≤–∏... üíï';
    if (status.stages.data_collected) return '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –º–æ–º–µ–Ω—Ç—ã... üì∏';
    return '–ò–∑—É—á–∞–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏... üëÄ';
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–Ω–∏–≥–∏
  const isBookReady = status?.stages.book_generated || false;
  const hasHTMLFile = status?.files?.html || isBookReady;
  const hasPDFFile = status?.files?.pdf;

  const loadBookContent = async () => {
    if (!hasHTMLFile) return;
    
    setIsLoadingBook(true);
    try {
      const response = await fetch(api.getViewUrl(runId));
      if (response.ok) {
        const html = await response.text();
        setBookContent(html);
        setShowInlineViewer(true);
        toast({
          title: "üìñ –ö–Ω–∏–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
          description: "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å",
        });
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É');
      }
    } catch (error) {
      console.error('Error loading book:', error);
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä' –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ",
        variant: "destructive",
      });
    } finally {
      setIsLoadingBook(false);
    }
  };

  const handleViewBook = () => {
    if (hasHTMLFile) {
      window.open(api.getViewUrl(runId), '_blank');
      toast({
        title: "üìñ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–Ω–∏–≥—É",
        description: "–ö–Ω–∏–≥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ",
      });
    }
  };

  const handleViewInline = () => {
    loadBookContent();
  };

  const handleViewIframe = () => {
    setShowIframeViewer(true);
    toast({
      title: "üìñ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–Ω–∏–≥—É",
      description: "–ö–Ω–∏–≥–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–µ",
    });
  };

  const handleDownloadPDF = () => {
    if (hasPDFFile) {
      const link = document.createElement('a');
      link.href = api.getDownloadUrl(runId, 'book.pdf');
      link.download = 'romantic_book.pdf';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞
  if (isBookReady && status) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center p-4">
        <div className="w-full max-w-6xl space-y-6">
          {/* Success Card */}
          <Card className="bg-white border-2 border-green-200">
            <CardHeader className="text-center">
              <div className="mx-auto w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mb-4 animate-pulse">
                <CheckCircle className="h-10 w-10 text-green-600" />
              </div>
              <CardTitle className="text-4xl text-black">üéâ –ö–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞!</CardTitle>
              <CardDescription className="text-xl text-gray-600">
                –í–∞—à–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
              </CardDescription>
            </CardHeader>
            
            <CardContent className="space-y-6">
              {/* Inline Book Viewer */}
              {showInlineViewer && bookContent && (
                <div className="border-2 border-gray-200 rounded-lg overflow-hidden">
                  <div className="bg-gray-100 p-3 flex items-center justify-between border-b">
                    <h3 className="font-medium text-black">üìñ –í–∞—à–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–∏–≥–∞</h3>
                    <div className="flex gap-2">
                      <Button
                        onClick={handleViewBook}
                        size="sm"
                        variant="outline"
                        className="text-xs"
                      >
                        <ExternalLink className="h-3 w-3 mr-1" />
                        –û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                      </Button>
                      <Button
                        onClick={() => setShowInlineViewer(false)}
                        size="sm"
                        variant="ghost"
                        className="text-xs"
                      >
                        ‚úï –ó–∞–∫—Ä—ã—Ç—å
                      </Button>
                    </div>
                  </div>
                  <div 
                    className="book-content overflow-auto bg-white p-6"
                    dangerouslySetInnerHTML={{ __html: bookContent }}
                    style={{
                      maxHeight: '70vh',
                      minHeight: '500px',
                      scrollbarWidth: 'thin',
                      scrollbarColor: '#cbd5e1 #f1f5f9'
                    }}
                  />
                  {/* Footer controls */}
                  <div className="bg-gray-50 p-3 border-t flex justify-between items-center">
                    <span className="text-sm text-gray-600">
                      üíù –°–æ–∑–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å
                    </span>
                    <div className="flex gap-2">
                      <Button
                        onClick={handleViewBook}
                        size="sm"
                        variant="outline"
                        className="text-xs"
                      >
                        <ExternalLink className="h-3 w-3 mr-1" />
                        –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                      </Button>
                      {hasPDFFile && (
                        <Button
                          onClick={handleDownloadPDF}
                          size="sm"
                          variant="outline"
                          className="text-xs"
                        >
                          <Download className="h-3 w-3 mr-1" />
                          PDF
                        </Button>
                      )}
                    </div>
                  </div>
                </div>
              )}

              {/* Iframe Book Viewer */}
              {showIframeViewer && (
                <div className="border-2 border-gray-200 rounded-lg overflow-hidden">
                  <div className="bg-blue-100 p-3 flex items-center justify-between border-b">
                    <h3 className="font-medium text-black">üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥–∏ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)</h3>
                    <div className="flex gap-2">
                      <Button
                        onClick={handleViewBook}
                        size="sm"
                        variant="outline"
                        className="text-xs"
                      >
                        <ExternalLink className="h-3 w-3 mr-1" />
                        –û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                      </Button>
                      <Button
                        onClick={() => setShowIframeViewer(false)}
                        size="sm"
                        variant="ghost"
                        className="text-xs"
                      >
                        ‚úï –ó–∞–∫—Ä—ã—Ç—å
                      </Button>
                    </div>
                  </div>
                  <iframe
                    src={api.getViewUrl(runId)}
                    className="w-full bg-white"
                    style={{
                      height: '70vh',
                      minHeight: '500px',
                      border: 'none'
                    }}
                    title="–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–∏–≥–∞"
                    sandbox="allow-same-origin allow-scripts"
                  />
                  <div className="bg-blue-50 p-3 border-t flex justify-between items-center">
                    <span className="text-sm text-blue-700">
                      üíù –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                    </span>
                    <div className="flex gap-2">
                      <Button
                        onClick={handleViewBook}
                        size="sm"
                        className="text-xs bg-blue-600 text-white hover:bg-blue-700"
                      >
                        <ExternalLink className="h-3 w-3 mr-1" />
                        –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω
                      </Button>
                    </div>
                  </div>
                </div>
              )}

              {/* Action Buttons */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {!showInlineViewer && !showIframeViewer && (
                  <>
                    <Button
                      onClick={handleViewInline}
                      size="lg"
                      disabled={!hasHTMLFile || isLoadingBook}
                      className="h-14 px-6 bg-blue-600 text-white hover:bg-blue-700 shadow-lg disabled:opacity-50"
                    >
                      {isLoadingBook ? (
                        <Loader2 className="h-5 w-5 mr-3 animate-spin" />
                      ) : (
                        <Eye className="h-5 w-5 mr-3" />
                      )}
                      {isLoadingBook ? '–ó–∞–≥—Ä—É–∂–∞–µ–º...' : '–ß–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å'}
                    </Button>

                    <Button
                      onClick={handleViewIframe}
                      size="lg"
                      disabled={!hasHTMLFile}
                      className="h-14 px-6 bg-purple-600 text-white hover:bg-purple-700 shadow-lg disabled:opacity-50"
                    >
                      <Eye className="h-5 w-5 mr-3" />
                      –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                    </Button>
                  </>
                )}

                <Button
                  onClick={handleViewBook}
                  size="lg"
                  disabled={!hasHTMLFile}
                  variant="outline"
                  className="h-14 px-6 border-2 border-gray-300 hover:border-gray-900 hover:bg-gray-50 disabled:opacity-50"
                >
                  <ExternalLink className="h-5 w-5 mr-3" />
                  –û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                </Button>

                {hasPDFFile && (
                  <Button
                    onClick={handleDownloadPDF}
                    variant="outline"
                    size="lg"
                    className="h-14 px-6 border-2 border-gray-300 hover:bg-gray-50 hover:border-gray-900"
                  >
                    <Download className="h-5 w-5 mr-2" />
                    –°–∫–∞—á–∞—Ç—å PDF
                  </Button>
                )}
              </div>

              {!hasHTMLFile && (
                <Alert className="border-yellow-200 bg-yellow-50">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription className="text-yellow-700">
                    –§–∞–π–ª –∫–Ω–∏–≥–∏ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                  </AlertDescription>
                </Alert>
              )}

              {/* Viewing Options Info */}
              {hasHTMLFile && !showInlineViewer && !showIframeViewer && (
                <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                  <h4 className="font-medium text-green-800 mb-2">üìñ –°–ø–æ—Å–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–Ω–∏–≥–∏:</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm text-green-700">
                    <div className="flex items-start gap-2">
                      <span className="text-blue-600">üíô</span>
                      <div>
                        <span className="font-medium">–ß–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å</span> - –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä—è–º–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                      </div>
                    </div>
                    <div className="flex items-start gap-2">
                      <span className="text-purple-600">üíú</span>
                      <div>
                        <span className="font-medium">–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</span> - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–∏–≥—É –≤–æ —Ñ—Ä–µ–π–º–µ
                      </div>
                    </div>
                  </div>
                  <p className="text-xs text-green-600 mt-2">
                    üí° –ï—Å–ª–∏ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                  </p>
                </div>
              )}

              {/* Profile Info */}
              {status.profile && (
                <div className="bg-gray-50 p-6 rounded-lg border border-gray-200">
                  <h3 className="font-semibold text-black mb-3 text-lg">üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div className="bg-white p-3 rounded border">
                      <span className="text-gray-600">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</span>
                      <div className="font-medium text-lg">@{status.profile.username}</div>
                    </div>
                    <div className="bg-white p-3 rounded border">
                      <span className="text-gray-600">–ò–º—è:</span>
                      <div className="font-medium text-lg">{status.profile.fullName}</div>
                    </div>
                    <div className="bg-white p-3 rounded border">
                      <span className="text-gray-600">–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</span>
                      <div className="font-medium text-lg">{status.profile.followers.toLocaleString()}</div>
                    </div>
                    <div className="bg-white p-3 rounded border">
                      <span className="text-gray-600">–ü–æ—Å—Ç–æ–≤:</span>
                      <div className="font-medium text-lg">{status.profile.posts}</div>
                    </div>
                  </div>
                </div>
              )}

              {/* Additional Actions */}
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button
                  onClick={onReset}
                  variant="ghost"
                  className="h-12 hover:bg-gray-50"
                >
                  <RotateCcw className="h-4 w-4 mr-2" />
                  –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
                </Button>
              </div>

              {/* Book URL for sharing */}
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <h4 className="font-medium text-black mb-2">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É:</h4>
                <div className="flex items-center gap-2">
                  <code className="flex-1 bg-white p-2 rounded border text-sm font-mono break-all">
                    {api.getViewUrl(runId)}
                  </code>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => {
                      navigator.clipboard.writeText(api.getViewUrl(runId));
                      toast({ title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", description: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞" });
                    }}
                  >
                    –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  // –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
  return (
    <div className="min-h-screen bg-white flex items-center justify-center p-4">
      <div className="w-full max-w-2xl">
        <Card className="bg-white border border-gray-200">
          <CardHeader className="text-center">
            <div className="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
              <Loader2 className="h-8 w-8 text-gray-600 animate-spin" />
            </div>
            <CardTitle className="text-2xl text-black">‚ú® –°–æ–∑–¥–∞–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –ª—é–±–≤–∏</CardTitle>
            <CardDescription className="text-gray-600">
              –ù–∞—à –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à Instagram –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–Ω–∏–≥—É
            </CardDescription>
            <div className="text-xs text-gray-500 mt-2">
              ID: {runId}
            </div>
          </CardHeader>
          
          <CardContent className="space-y-6">
            {error && (
              <Alert className="border-yellow-200 bg-yellow-50">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription className="text-yellow-700">
                  {error}
                </AlertDescription>
              </Alert>
            )}

            {/* Manual Check Button */}
            <div className="text-center">
              <Button
                onClick={checkStatusManually}
                disabled={isManualChecking}
                variant="outline"
                className="h-12 px-6 border-2 border-blue-200 hover:border-blue-400 hover:bg-blue-50"
              >
                {isManualChecking ? (
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4 mr-2" />
                )}
                {isManualChecking ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏'}
              </Button>
              {lastChecked && (
                <p className="text-xs text-gray-500 mt-1">
                  –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {lastChecked.toLocaleTimeString()}
                </p>
              )}
            </div>

            {/* Status Info */}
            {status && (
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <h4 className="font-medium mb-3 text-blue-900">‚ú® –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å:</h4>
                <div className="space-y-2 text-sm">
                  <div className="flex items-center justify-between">
                    <span className="text-blue-700">üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:</span>
                    <span className={`font-medium ${status.stages.data_collected ? 'text-green-600' : 'text-orange-600'}`}>
                      {status.stages.data_collected ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω' : '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-blue-700">üì∏ –°–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</span>
                    <span className={`font-medium ${status.stages.images_downloaded ? 'text-green-600' : 'text-gray-500'}`}>
                      {status.stages.images_downloaded ? '‚úÖ –ì–æ—Ç–æ–≤–æ' : '‚è∏Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ'}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-blue-700">üíï –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:</span>
                    <span className={`font-medium ${status.stages.book_generated ? 'text-green-600' : 'text-gray-500'}`}>
                      {status.stages.book_generated ? '‚úÖ –ì–æ—Ç–æ–≤–∞ –∫ —á—Ç–µ–Ω–∏—é!' : '‚è∏Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ'}
                    </span>
                  </div>
                  {status.files && Object.keys(status.files).length > 0 && (
                    <div className="mt-3 pt-2 border-t border-blue-200">
                      <span className="text-blue-700 text-xs">üìÅ –§–∞–π–ª—ã: </span>
                      <span className="text-xs text-gray-600">
                        {status.files.html && 'üìñ HTML'} {status.files.pdf && 'üìÑ PDF'}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Progress */}
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium text-black">–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                <span className="text-sm text-gray-600">{getProgress()}%</span>
              </div>
              <ProgressBar value={getProgress()} className="h-3" />
              <p className="text-center text-base text-gray-700 font-medium">
                {getCurrentStep()}
              </p>
            </div>

            {/* Steps indicator */}
            <div className="space-y-3">
              <div className={`flex items-center gap-3 p-3 rounded-lg ${status?.stages.data_collected ? 'bg-green-50 border border-green-200' : 'bg-gray-50'}`}>
                <div className={`w-6 h-6 rounded-full flex items-center justify-center ${status?.stages.data_collected ? 'bg-green-500' : 'bg-gray-300'}`}>
                  {status?.stages.data_collected ? <CheckCircle className="w-4 h-4 text-white" /> : <span className="text-xs text-white">1</span>}
                </div>
                <div className="flex-1">
                  <span className={`block font-medium ${status?.stages.data_collected ? 'text-green-800' : 'text-gray-600'}`}>
                    –ò–∑—É—á–∞–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å üëÄ
                  </span>
                  <span className="text-xs text-gray-500">
                    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                  </span>
                </div>
              </div>
              
              <div className={`flex items-center gap-3 p-3 rounded-lg ${status?.stages.images_downloaded ? 'bg-green-50 border border-green-200' : 'bg-gray-50'}`}>
                <div className={`w-6 h-6 rounded-full flex items-center justify-center ${status?.stages.images_downloaded ? 'bg-green-500' : 'bg-gray-300'}`}>
                  {status?.stages.images_downloaded ? <CheckCircle className="w-4 h-4 text-white" /> : <span className="text-xs text-white">2</span>}
                </div>
                <div className="flex-1">
                  <span className={`block font-medium ${status?.stages.images_downloaded ? 'text-green-800' : 'text-gray-600'}`}>
                    –°–æ–±–∏—Ä–∞–µ–º –≤–∞—à–∏ –º–æ–º–µ–Ω—Ç—ã üì∏
                  </span>
                  <span className="text-xs text-gray-500">
                    –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –¥–ª—è –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏
                  </span>
                </div>
              </div>
              
              <div className={`flex items-center gap-3 p-3 rounded-lg ${status?.stages.book_generated ? 'bg-green-50 border border-green-200' : 'bg-gray-50'}`}>
                <div className={`w-6 h-6 rounded-full flex items-center justify-center ${status?.stages.book_generated ? 'bg-green-500' : 'bg-gray-300'}`}>
                  {status?.stages.book_generated ? <CheckCircle className="w-4 h-4 text-white" /> : <span className="text-xs text-white">3</span>}
                </div>
                <div className="flex-1">
                  <span className={`block font-medium ${status?.stages.book_generated ? 'text-green-800' : 'text-gray-600'}`}>
                    –°–æ–∑–¥–∞–µ–º –≤–∞—à—É –∫–Ω–∏–≥—É –ª—é–±–≤–∏ üíï
                  </span>
                  <span className="text-xs text-gray-500">
                    –ü–∏—à–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å
                  </span>
                </div>
              </div>
            </div>

            {/* Profile preview if available */}
            {status?.profile && (
              <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                <h3 className="font-medium text-black mb-2">‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω</h3>
                <p className="text-sm text-gray-600">
                  <span className="font-medium">{status.profile.fullName}</span> (@{status.profile.username})
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  {status.profile.followers.toLocaleString()} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚Ä¢ {status.profile.posts} –ø–æ—Å—Ç–æ–≤
                </p>
              </div>
            )}

            {/* Reset button */}
            <div className="text-center pt-4 border-t">
              <Button
                onClick={onReset}
                variant="ghost"
                className="text-gray-500 hover:text-gray-700"
              >
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–æ—Ä–º–µ
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
} 