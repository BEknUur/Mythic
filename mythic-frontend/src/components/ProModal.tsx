"use client"

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Checkbox } from '@/components/ui/checkbox';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@clerk/clerk-react';
import { Mail, Loader2, CreditCard } from 'lucide-react';
import { payments } from '@/lib/api';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog"


export function ProModal({ isOpen, setIsOpen }: { isOpen: boolean, setIsOpen: (open: boolean) => void }) {
  const { toast } = useToast();
  const { getToken } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [email, setEmail] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const token = await getToken();
      if (!token) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      // –°–æ–∑–¥–∞–µ–º checkout –¥–ª—è Pro –ø–æ–¥–ø–∏—Å–∫–∏
      const response = await payments.createCheckout({
        product_type: 'pro_subscription',
        customer_email: email || undefined
      }, token);

      if (response.success) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Polar checkout
        window.location.href = response.checkout_url;
      } else {
        throw new Error(response.message);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è checkout:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂',
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent className="bg-gray-50 dark:bg-gray-950 border-gray-200 dark:border-gray-800">
        <DialogHeader className="text-center">
          <DialogTitle className="text-2xl font-bold tracking-tight">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Pro</DialogTitle>
          <DialogDescription>
            –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –∫–Ω–∏–≥
          </DialogDescription>
          <div className="flex justify-center items-center gap-2 mt-2">
            <span className="font-semibold text-purple-500">$9.99/–º–µ—Å—è—Ü</span>
          </div>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6 pt-4">
            <div className="space-y-2">
                <Label htmlFor="email">Email –¥–ª—è —á–µ–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
                <Input 
                  id="email" 
                  type="email" 
                  placeholder="–í–∞—à email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
                <p className="text-xs text-gray-500">
                  –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω email –∏–∑ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                </p>
            </div>
            
            <div className="p-4 rounded-md bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800">
                <h4 className="font-semibold text-purple-900 dark:text-purple-100 mb-2">–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ Pro:</h4>
                <ul className="text-sm text-purple-700 dark:text-purple-200 space-y-1">
                    <li>‚ú® –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–∏–≥</li>
                    <li>‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</li>
                    <li>üé® –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∏–ª—è–º</li>
                    <li>üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è TikTok (—Å–∫–æ—Ä–æ)</li>
                    <li>üí¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</li>
                </ul>
            </div>

            <div className="flex items-start space-x-3 p-4 rounded-md bg-gray-100 dark:bg-gray-900">
                <Checkbox id="consent" className="mt-1" required />
                <div className="grid gap-1.5 leading-none">
                    <Label htmlFor="consent" className="font-normal">
                        –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
                    </Label>
                </div>
            </div>
            
            <Button type="submit" className="w-full h-12" disabled={isLoading}>
                {isLoading ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                    <CreditCard className="mr-2 h-4 w-4" />
                )}
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
            </Button>
            
            <p className="text-xs text-center text-gray-500">
                –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Polar. –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
            </p>
        </form>
      </DialogContent>
    </Dialog>
  );
} 